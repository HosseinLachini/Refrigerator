
bin/Debug/M8CB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001f46  00001fda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  0080006e  0080006e  00001fe8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ffc  2**2
                  CONTENTS, READONLY
  5 .avr.prop     000000b3  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001b8  00000000  00000000  000020f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000025de  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f25  00000000  00000000  00004886  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001473  00000000  00000000  000057ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007f8  00000000  00000000  00006c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f46  00000000  00000000  00007418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f8c  00000000  00000000  0000835e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a8  00000000  00000000  000092ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	36 c2       	rjmp	.+1132   	; 0x46e <__ctors_end>
       2:	50 c2       	rjmp	.+1184   	; 0x4a4 <__bad_interrupt>
       4:	4f c2       	rjmp	.+1182   	; 0x4a4 <__bad_interrupt>
       6:	4f c2       	rjmp	.+1182   	; 0x4a6 <__vector_3>
       8:	4d c2       	rjmp	.+1178   	; 0x4a4 <__bad_interrupt>
       a:	4c c2       	rjmp	.+1176   	; 0x4a4 <__bad_interrupt>
       c:	4b c2       	rjmp	.+1174   	; 0x4a4 <__bad_interrupt>
       e:	4a c2       	rjmp	.+1172   	; 0x4a4 <__bad_interrupt>
      10:	49 c2       	rjmp	.+1170   	; 0x4a4 <__bad_interrupt>
      12:	48 c2       	rjmp	.+1168   	; 0x4a4 <__bad_interrupt>
      14:	47 c2       	rjmp	.+1166   	; 0x4a4 <__bad_interrupt>
      16:	46 c2       	rjmp	.+1164   	; 0x4a4 <__bad_interrupt>
      18:	45 c2       	rjmp	.+1162   	; 0x4a4 <__bad_interrupt>
      1a:	44 c2       	rjmp	.+1160   	; 0x4a4 <__bad_interrupt>
      1c:	43 c2       	rjmp	.+1158   	; 0x4a4 <__bad_interrupt>
      1e:	42 c2       	rjmp	.+1156   	; 0x4a4 <__bad_interrupt>
      20:	41 c2       	rjmp	.+1154   	; 0x4a4 <__bad_interrupt>
      22:	40 c2       	rjmp	.+1152   	; 0x4a4 <__bad_interrupt>
      24:	3f c2       	rjmp	.+1150   	; 0x4a4 <__bad_interrupt>
      26:	99 c4       	rjmp	.+2354   	; 0x95a <_ZN8hardware14initializePinsEv+0x74>
      28:	98 c4       	rjmp	.+2352   	; 0x95a <_ZN8hardware14initializePinsEv+0x74>
      2a:	9a c4       	rjmp	.+2356   	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
      2c:	99 c4       	rjmp	.+2354   	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
      2e:	98 c4       	rjmp	.+2352   	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
      30:	97 c4       	rjmp	.+2350   	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
      32:	8d c4       	rjmp	.+2330   	; 0x94e <_ZN8hardware14initializePinsEv+0x68>
      34:	8c c4       	rjmp	.+2328   	; 0x94e <_ZN8hardware14initializePinsEv+0x68>
      36:	91 c4       	rjmp	.+2338   	; 0x95a <_ZN8hardware14initializePinsEv+0x74>
      38:	90 c4       	rjmp	.+2336   	; 0x95a <_ZN8hardware14initializePinsEv+0x74>
      3a:	8f c4       	rjmp	.+2334   	; 0x95a <_ZN8hardware14initializePinsEv+0x74>
      3c:	88 c4       	rjmp	.+2320   	; 0x94e <_ZN8hardware14initializePinsEv+0x68>
      3e:	87 c4       	rjmp	.+2318   	; 0x94e <_ZN8hardware14initializePinsEv+0x68>
      40:	86 c4       	rjmp	.+2316   	; 0x94e <_ZN8hardware14initializePinsEv+0x68>
      42:	85 c4       	rjmp	.+2314   	; 0x94e <_ZN8hardware14initializePinsEv+0x68>
      44:	84 c4       	rjmp	.+2312   	; 0x94e <_ZN8hardware14initializePinsEv+0x68>
      46:	83 c4       	rjmp	.+2310   	; 0x94e <_ZN8hardware14initializePinsEv+0x68>
      48:	8b c4       	rjmp	.+2326   	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
      4a:	8a c4       	rjmp	.+2324   	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
      4c:	89 c4       	rjmp	.+2322   	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
      4e:	88 c4       	rjmp	.+2320   	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
      50:	87 c4       	rjmp	.+2318   	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
      52:	80 c4       	rjmp	.+2304   	; 0x954 <_ZN8hardware14initializePinsEv+0x6e>
      54:	7f c4       	rjmp	.+2302   	; 0x954 <_ZN8hardware14initializePinsEv+0x6e>
      56:	7e c4       	rjmp	.+2300   	; 0x954 <_ZN8hardware14initializePinsEv+0x6e>
      58:	7d c4       	rjmp	.+2298   	; 0x954 <_ZN8hardware14initializePinsEv+0x6e>
      5a:	7c c4       	rjmp	.+2296   	; 0x954 <_ZN8hardware14initializePinsEv+0x6e>
      5c:	7b c4       	rjmp	.+2294   	; 0x954 <_ZN8hardware14initializePinsEv+0x6e>
      5e:	7a c4       	rjmp	.+2292   	; 0x954 <_ZN8hardware14initializePinsEv+0x6e>
      60:	7c c4       	rjmp	.+2296   	; 0x95a <_ZN8hardware14initializePinsEv+0x74>
      62:	7b c4       	rjmp	.+2294   	; 0x95a <_ZN8hardware14initializePinsEv+0x74>
      64:	7a c4       	rjmp	.+2292   	; 0x95a <_ZN8hardware14initializePinsEv+0x74>
      66:	9d c4       	rjmp	.+2362   	; 0x9a2 <_ZN8hardware14initializePinsEv+0xbc>
      68:	9e c4       	rjmp	.+2364   	; 0x9a6 <_ZN8hardware14initializePinsEv+0xc0>
      6a:	a5 c4       	rjmp	.+2378   	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
      6c:	a4 c4       	rjmp	.+2376   	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
      6e:	a3 c4       	rjmp	.+2374   	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
      70:	a2 c4       	rjmp	.+2372   	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
      72:	9d c4       	rjmp	.+2362   	; 0x9ae <_ZN8hardware14initializePinsEv+0xc8>
      74:	9e c4       	rjmp	.+2364   	; 0x9b2 <_ZN8hardware14initializePinsEv+0xcc>
      76:	99 c4       	rjmp	.+2354   	; 0x9aa <_ZN8hardware14initializePinsEv+0xc4>
      78:	9a c4       	rjmp	.+2356   	; 0x9ae <_ZN8hardware14initializePinsEv+0xc8>
      7a:	9b c4       	rjmp	.+2358   	; 0x9b2 <_ZN8hardware14initializePinsEv+0xcc>
      7c:	8c c4       	rjmp	.+2328   	; 0x996 <_ZN8hardware14initializePinsEv+0xb0>
      7e:	8d c4       	rjmp	.+2330   	; 0x99a <_ZN8hardware14initializePinsEv+0xb4>
      80:	8e c4       	rjmp	.+2332   	; 0x99e <_ZN8hardware14initializePinsEv+0xb8>
      82:	8f c4       	rjmp	.+2334   	; 0x9a2 <_ZN8hardware14initializePinsEv+0xbc>
      84:	90 c4       	rjmp	.+2336   	; 0x9a6 <_ZN8hardware14initializePinsEv+0xc0>
      86:	91 c4       	rjmp	.+2338   	; 0x9aa <_ZN8hardware14initializePinsEv+0xc4>
      88:	96 c4       	rjmp	.+2348   	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
      8a:	95 c4       	rjmp	.+2346   	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
      8c:	94 c4       	rjmp	.+2344   	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
      8e:	93 c4       	rjmp	.+2342   	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
      90:	92 c4       	rjmp	.+2340   	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
      92:	81 c4       	rjmp	.+2306   	; 0x996 <_ZN8hardware14initializePinsEv+0xb0>
      94:	82 c4       	rjmp	.+2308   	; 0x99a <_ZN8hardware14initializePinsEv+0xb4>
      96:	83 c4       	rjmp	.+2310   	; 0x99e <_ZN8hardware14initializePinsEv+0xb8>
      98:	84 c4       	rjmp	.+2312   	; 0x9a2 <_ZN8hardware14initializePinsEv+0xbc>
      9a:	85 c4       	rjmp	.+2314   	; 0x9a6 <_ZN8hardware14initializePinsEv+0xc0>
      9c:	86 c4       	rjmp	.+2316   	; 0x9aa <_ZN8hardware14initializePinsEv+0xc4>
      9e:	87 c4       	rjmp	.+2318   	; 0x9ae <_ZN8hardware14initializePinsEv+0xc8>
      a0:	7a c4       	rjmp	.+2292   	; 0x996 <_ZN8hardware14initializePinsEv+0xb0>
      a2:	7b c4       	rjmp	.+2294   	; 0x99a <_ZN8hardware14initializePinsEv+0xb4>
      a4:	7c c4       	rjmp	.+2296   	; 0x99e <_ZN8hardware14initializePinsEv+0xb8>
      a6:	c6 c4       	rjmp	.+2444   	; 0xa34 <_ZN8hardware14initializePinsEv+0x14e>
      a8:	c5 c4       	rjmp	.+2442   	; 0xa34 <_ZN8hardware14initializePinsEv+0x14e>
      aa:	c7 c4       	rjmp	.+2446   	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
      ac:	c6 c4       	rjmp	.+2444   	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
      ae:	c5 c4       	rjmp	.+2442   	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
      b0:	c4 c4       	rjmp	.+2440   	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
      b2:	ba c4       	rjmp	.+2420   	; 0xa28 <_ZN8hardware14initializePinsEv+0x142>
      b4:	b9 c4       	rjmp	.+2418   	; 0xa28 <_ZN8hardware14initializePinsEv+0x142>
      b6:	be c4       	rjmp	.+2428   	; 0xa34 <_ZN8hardware14initializePinsEv+0x14e>
      b8:	bd c4       	rjmp	.+2426   	; 0xa34 <_ZN8hardware14initializePinsEv+0x14e>
      ba:	bc c4       	rjmp	.+2424   	; 0xa34 <_ZN8hardware14initializePinsEv+0x14e>
      bc:	b5 c4       	rjmp	.+2410   	; 0xa28 <_ZN8hardware14initializePinsEv+0x142>
      be:	b4 c4       	rjmp	.+2408   	; 0xa28 <_ZN8hardware14initializePinsEv+0x142>
      c0:	b3 c4       	rjmp	.+2406   	; 0xa28 <_ZN8hardware14initializePinsEv+0x142>
      c2:	b2 c4       	rjmp	.+2404   	; 0xa28 <_ZN8hardware14initializePinsEv+0x142>
      c4:	b1 c4       	rjmp	.+2402   	; 0xa28 <_ZN8hardware14initializePinsEv+0x142>
      c6:	b0 c4       	rjmp	.+2400   	; 0xa28 <_ZN8hardware14initializePinsEv+0x142>
      c8:	b8 c4       	rjmp	.+2416   	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
      ca:	b7 c4       	rjmp	.+2414   	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
      cc:	b6 c4       	rjmp	.+2412   	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
      ce:	b5 c4       	rjmp	.+2410   	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
      d0:	b4 c4       	rjmp	.+2408   	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
      d2:	ad c4       	rjmp	.+2394   	; 0xa2e <_ZN8hardware14initializePinsEv+0x148>
      d4:	ac c4       	rjmp	.+2392   	; 0xa2e <_ZN8hardware14initializePinsEv+0x148>
      d6:	ab c4       	rjmp	.+2390   	; 0xa2e <_ZN8hardware14initializePinsEv+0x148>
      d8:	aa c4       	rjmp	.+2388   	; 0xa2e <_ZN8hardware14initializePinsEv+0x148>
      da:	a9 c4       	rjmp	.+2386   	; 0xa2e <_ZN8hardware14initializePinsEv+0x148>
      dc:	a8 c4       	rjmp	.+2384   	; 0xa2e <_ZN8hardware14initializePinsEv+0x148>
      de:	a7 c4       	rjmp	.+2382   	; 0xa2e <_ZN8hardware14initializePinsEv+0x148>
      e0:	a9 c4       	rjmp	.+2386   	; 0xa34 <_ZN8hardware14initializePinsEv+0x14e>
      e2:	a8 c4       	rjmp	.+2384   	; 0xa34 <_ZN8hardware14initializePinsEv+0x14e>
      e4:	a7 c4       	rjmp	.+2382   	; 0xa34 <_ZN8hardware14initializePinsEv+0x14e>
      e6:	ca c4       	rjmp	.+2452   	; 0xa7c <_ZN8hardware14initializePinsEv+0x196>
      e8:	cb c4       	rjmp	.+2454   	; 0xa80 <_ZN8hardware14initializePinsEv+0x19a>
      ea:	d2 c4       	rjmp	.+2468   	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
      ec:	d1 c4       	rjmp	.+2466   	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
      ee:	d0 c4       	rjmp	.+2464   	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
      f0:	cf c4       	rjmp	.+2462   	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
      f2:	ca c4       	rjmp	.+2452   	; 0xa88 <_ZN8hardware14initializePinsEv+0x1a2>
      f4:	cb c4       	rjmp	.+2454   	; 0xa8c <_ZN8hardware14initializePinsEv+0x1a6>
      f6:	c6 c4       	rjmp	.+2444   	; 0xa84 <_ZN8hardware14initializePinsEv+0x19e>
      f8:	c7 c4       	rjmp	.+2446   	; 0xa88 <_ZN8hardware14initializePinsEv+0x1a2>
      fa:	c8 c4       	rjmp	.+2448   	; 0xa8c <_ZN8hardware14initializePinsEv+0x1a6>
      fc:	b9 c4       	rjmp	.+2418   	; 0xa70 <_ZN8hardware14initializePinsEv+0x18a>
      fe:	ba c4       	rjmp	.+2420   	; 0xa74 <_ZN8hardware14initializePinsEv+0x18e>
     100:	bb c4       	rjmp	.+2422   	; 0xa78 <_ZN8hardware14initializePinsEv+0x192>
     102:	bc c4       	rjmp	.+2424   	; 0xa7c <_ZN8hardware14initializePinsEv+0x196>
     104:	bd c4       	rjmp	.+2426   	; 0xa80 <_ZN8hardware14initializePinsEv+0x19a>
     106:	be c4       	rjmp	.+2428   	; 0xa84 <_ZN8hardware14initializePinsEv+0x19e>
     108:	c3 c4       	rjmp	.+2438   	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
     10a:	c2 c4       	rjmp	.+2436   	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
     10c:	c1 c4       	rjmp	.+2434   	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
     10e:	c0 c4       	rjmp	.+2432   	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
     110:	bf c4       	rjmp	.+2430   	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
     112:	ae c4       	rjmp	.+2396   	; 0xa70 <_ZN8hardware14initializePinsEv+0x18a>
     114:	af c4       	rjmp	.+2398   	; 0xa74 <_ZN8hardware14initializePinsEv+0x18e>
     116:	b0 c4       	rjmp	.+2400   	; 0xa78 <_ZN8hardware14initializePinsEv+0x192>
     118:	b1 c4       	rjmp	.+2402   	; 0xa7c <_ZN8hardware14initializePinsEv+0x196>
     11a:	b2 c4       	rjmp	.+2404   	; 0xa80 <_ZN8hardware14initializePinsEv+0x19a>
     11c:	b3 c4       	rjmp	.+2406   	; 0xa84 <_ZN8hardware14initializePinsEv+0x19e>
     11e:	b4 c4       	rjmp	.+2408   	; 0xa88 <_ZN8hardware14initializePinsEv+0x1a2>
     120:	a7 c4       	rjmp	.+2382   	; 0xa70 <_ZN8hardware14initializePinsEv+0x18a>
     122:	a8 c4       	rjmp	.+2384   	; 0xa74 <_ZN8hardware14initializePinsEv+0x18e>
     124:	a9 c4       	rjmp	.+2386   	; 0xa78 <_ZN8hardware14initializePinsEv+0x192>
     126:	f3 c4       	rjmp	.+2534   	; 0xb0e <_ZN8hardware14initializePinsEv+0x228>
     128:	f2 c4       	rjmp	.+2532   	; 0xb0e <_ZN8hardware14initializePinsEv+0x228>
     12a:	f4 c4       	rjmp	.+2536   	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     12c:	f3 c4       	rjmp	.+2534   	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     12e:	f2 c4       	rjmp	.+2532   	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     130:	f1 c4       	rjmp	.+2530   	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     132:	e7 c4       	rjmp	.+2510   	; 0xb02 <_ZN8hardware14initializePinsEv+0x21c>
     134:	e6 c4       	rjmp	.+2508   	; 0xb02 <_ZN8hardware14initializePinsEv+0x21c>
     136:	eb c4       	rjmp	.+2518   	; 0xb0e <_ZN8hardware14initializePinsEv+0x228>
     138:	ea c4       	rjmp	.+2516   	; 0xb0e <_ZN8hardware14initializePinsEv+0x228>
     13a:	e9 c4       	rjmp	.+2514   	; 0xb0e <_ZN8hardware14initializePinsEv+0x228>
     13c:	e2 c4       	rjmp	.+2500   	; 0xb02 <_ZN8hardware14initializePinsEv+0x21c>
     13e:	e1 c4       	rjmp	.+2498   	; 0xb02 <_ZN8hardware14initializePinsEv+0x21c>
     140:	e0 c4       	rjmp	.+2496   	; 0xb02 <_ZN8hardware14initializePinsEv+0x21c>
     142:	df c4       	rjmp	.+2494   	; 0xb02 <_ZN8hardware14initializePinsEv+0x21c>
     144:	de c4       	rjmp	.+2492   	; 0xb02 <_ZN8hardware14initializePinsEv+0x21c>
     146:	dd c4       	rjmp	.+2490   	; 0xb02 <_ZN8hardware14initializePinsEv+0x21c>
     148:	e5 c4       	rjmp	.+2506   	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     14a:	e4 c4       	rjmp	.+2504   	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     14c:	e3 c4       	rjmp	.+2502   	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     14e:	e2 c4       	rjmp	.+2500   	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     150:	e1 c4       	rjmp	.+2498   	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     152:	da c4       	rjmp	.+2484   	; 0xb08 <_ZN8hardware14initializePinsEv+0x222>
     154:	d9 c4       	rjmp	.+2482   	; 0xb08 <_ZN8hardware14initializePinsEv+0x222>
     156:	d8 c4       	rjmp	.+2480   	; 0xb08 <_ZN8hardware14initializePinsEv+0x222>
     158:	d7 c4       	rjmp	.+2478   	; 0xb08 <_ZN8hardware14initializePinsEv+0x222>
     15a:	d6 c4       	rjmp	.+2476   	; 0xb08 <_ZN8hardware14initializePinsEv+0x222>
     15c:	d5 c4       	rjmp	.+2474   	; 0xb08 <_ZN8hardware14initializePinsEv+0x222>
     15e:	d4 c4       	rjmp	.+2472   	; 0xb08 <_ZN8hardware14initializePinsEv+0x222>
     160:	d6 c4       	rjmp	.+2476   	; 0xb0e <_ZN8hardware14initializePinsEv+0x228>
     162:	d5 c4       	rjmp	.+2474   	; 0xb0e <_ZN8hardware14initializePinsEv+0x228>
     164:	d4 c4       	rjmp	.+2472   	; 0xb0e <_ZN8hardware14initializePinsEv+0x228>
     166:	f7 c4       	rjmp	.+2542   	; 0xb56 <_ZN8hardware14initializePinsEv+0x270>
     168:	f8 c4       	rjmp	.+2544   	; 0xb5a <_ZN8hardware14initializePinsEv+0x274>
     16a:	ff c4       	rjmp	.+2558   	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     16c:	fe c4       	rjmp	.+2556   	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     16e:	fd c4       	rjmp	.+2554   	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     170:	fc c4       	rjmp	.+2552   	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     172:	f7 c4       	rjmp	.+2542   	; 0xb62 <_ZN8hardware14initializePinsEv+0x27c>
     174:	f8 c4       	rjmp	.+2544   	; 0xb66 <_ZN8hardware14initializePinsEv+0x280>
     176:	f3 c4       	rjmp	.+2534   	; 0xb5e <_ZN8hardware14initializePinsEv+0x278>
     178:	f4 c4       	rjmp	.+2536   	; 0xb62 <_ZN8hardware14initializePinsEv+0x27c>
     17a:	f5 c4       	rjmp	.+2538   	; 0xb66 <_ZN8hardware14initializePinsEv+0x280>
     17c:	e6 c4       	rjmp	.+2508   	; 0xb4a <_ZN8hardware14initializePinsEv+0x264>
     17e:	e7 c4       	rjmp	.+2510   	; 0xb4e <_ZN8hardware14initializePinsEv+0x268>
     180:	e8 c4       	rjmp	.+2512   	; 0xb52 <_ZN8hardware14initializePinsEv+0x26c>
     182:	e9 c4       	rjmp	.+2514   	; 0xb56 <_ZN8hardware14initializePinsEv+0x270>
     184:	ea c4       	rjmp	.+2516   	; 0xb5a <_ZN8hardware14initializePinsEv+0x274>
     186:	eb c4       	rjmp	.+2518   	; 0xb5e <_ZN8hardware14initializePinsEv+0x278>
     188:	f0 c4       	rjmp	.+2528   	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     18a:	ef c4       	rjmp	.+2526   	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     18c:	ee c4       	rjmp	.+2524   	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     18e:	ed c4       	rjmp	.+2522   	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     190:	ec c4       	rjmp	.+2520   	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     192:	db c4       	rjmp	.+2486   	; 0xb4a <_ZN8hardware14initializePinsEv+0x264>
     194:	dc c4       	rjmp	.+2488   	; 0xb4e <_ZN8hardware14initializePinsEv+0x268>
     196:	dd c4       	rjmp	.+2490   	; 0xb52 <_ZN8hardware14initializePinsEv+0x26c>
     198:	de c4       	rjmp	.+2492   	; 0xb56 <_ZN8hardware14initializePinsEv+0x270>
     19a:	df c4       	rjmp	.+2494   	; 0xb5a <_ZN8hardware14initializePinsEv+0x274>
     19c:	e0 c4       	rjmp	.+2496   	; 0xb5e <_ZN8hardware14initializePinsEv+0x278>
     19e:	e1 c4       	rjmp	.+2498   	; 0xb62 <_ZN8hardware14initializePinsEv+0x27c>
     1a0:	d4 c4       	rjmp	.+2472   	; 0xb4a <_ZN8hardware14initializePinsEv+0x264>
     1a2:	d5 c4       	rjmp	.+2474   	; 0xb4e <_ZN8hardware14initializePinsEv+0x268>
     1a4:	d6 c4       	rjmp	.+2476   	; 0xb52 <_ZN8hardware14initializePinsEv+0x26c>
     1a6:	20 c5       	rjmp	.+2624   	; 0xbe8 <_ZN8hardware14initializePinsEv+0x302>
     1a8:	1f c5       	rjmp	.+2622   	; 0xbe8 <_ZN8hardware14initializePinsEv+0x302>
     1aa:	21 c5       	rjmp	.+2626   	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     1ac:	20 c5       	rjmp	.+2624   	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     1ae:	1f c5       	rjmp	.+2622   	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     1b0:	1e c5       	rjmp	.+2620   	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     1b2:	14 c5       	rjmp	.+2600   	; 0xbdc <_ZN8hardware14initializePinsEv+0x2f6>
     1b4:	13 c5       	rjmp	.+2598   	; 0xbdc <_ZN8hardware14initializePinsEv+0x2f6>
     1b6:	18 c5       	rjmp	.+2608   	; 0xbe8 <_ZN8hardware14initializePinsEv+0x302>
     1b8:	17 c5       	rjmp	.+2606   	; 0xbe8 <_ZN8hardware14initializePinsEv+0x302>
     1ba:	16 c5       	rjmp	.+2604   	; 0xbe8 <_ZN8hardware14initializePinsEv+0x302>
     1bc:	0f c5       	rjmp	.+2590   	; 0xbdc <_ZN8hardware14initializePinsEv+0x2f6>
     1be:	0e c5       	rjmp	.+2588   	; 0xbdc <_ZN8hardware14initializePinsEv+0x2f6>
     1c0:	0d c5       	rjmp	.+2586   	; 0xbdc <_ZN8hardware14initializePinsEv+0x2f6>
     1c2:	0c c5       	rjmp	.+2584   	; 0xbdc <_ZN8hardware14initializePinsEv+0x2f6>
     1c4:	0b c5       	rjmp	.+2582   	; 0xbdc <_ZN8hardware14initializePinsEv+0x2f6>
     1c6:	0a c5       	rjmp	.+2580   	; 0xbdc <_ZN8hardware14initializePinsEv+0x2f6>
     1c8:	12 c5       	rjmp	.+2596   	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     1ca:	11 c5       	rjmp	.+2594   	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     1cc:	10 c5       	rjmp	.+2592   	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     1ce:	0f c5       	rjmp	.+2590   	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     1d0:	0e c5       	rjmp	.+2588   	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     1d2:	07 c5       	rjmp	.+2574   	; 0xbe2 <_ZN8hardware14initializePinsEv+0x2fc>
     1d4:	06 c5       	rjmp	.+2572   	; 0xbe2 <_ZN8hardware14initializePinsEv+0x2fc>
     1d6:	05 c5       	rjmp	.+2570   	; 0xbe2 <_ZN8hardware14initializePinsEv+0x2fc>
     1d8:	04 c5       	rjmp	.+2568   	; 0xbe2 <_ZN8hardware14initializePinsEv+0x2fc>
     1da:	03 c5       	rjmp	.+2566   	; 0xbe2 <_ZN8hardware14initializePinsEv+0x2fc>
     1dc:	02 c5       	rjmp	.+2564   	; 0xbe2 <_ZN8hardware14initializePinsEv+0x2fc>
     1de:	01 c5       	rjmp	.+2562   	; 0xbe2 <_ZN8hardware14initializePinsEv+0x2fc>
     1e0:	03 c5       	rjmp	.+2566   	; 0xbe8 <_ZN8hardware14initializePinsEv+0x302>
     1e2:	02 c5       	rjmp	.+2564   	; 0xbe8 <_ZN8hardware14initializePinsEv+0x302>
     1e4:	01 c5       	rjmp	.+2562   	; 0xbe8 <_ZN8hardware14initializePinsEv+0x302>
     1e6:	24 c5       	rjmp	.+2632   	; 0xc30 <_ZN8hardware14initializePinsEv+0x34a>
     1e8:	25 c5       	rjmp	.+2634   	; 0xc34 <_ZN8hardware14initializePinsEv+0x34e>
     1ea:	2c c5       	rjmp	.+2648   	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     1ec:	2b c5       	rjmp	.+2646   	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     1ee:	2a c5       	rjmp	.+2644   	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     1f0:	29 c5       	rjmp	.+2642   	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     1f2:	24 c5       	rjmp	.+2632   	; 0xc3c <_ZN8hardware14initializePinsEv+0x356>
     1f4:	25 c5       	rjmp	.+2634   	; 0xc40 <_ZN8hardware14initializePinsEv+0x35a>
     1f6:	20 c5       	rjmp	.+2624   	; 0xc38 <_ZN8hardware14initializePinsEv+0x352>
     1f8:	21 c5       	rjmp	.+2626   	; 0xc3c <_ZN8hardware14initializePinsEv+0x356>
     1fa:	22 c5       	rjmp	.+2628   	; 0xc40 <_ZN8hardware14initializePinsEv+0x35a>
     1fc:	13 c5       	rjmp	.+2598   	; 0xc24 <_ZN8hardware14initializePinsEv+0x33e>
     1fe:	14 c5       	rjmp	.+2600   	; 0xc28 <_ZN8hardware14initializePinsEv+0x342>
     200:	15 c5       	rjmp	.+2602   	; 0xc2c <_ZN8hardware14initializePinsEv+0x346>
     202:	16 c5       	rjmp	.+2604   	; 0xc30 <_ZN8hardware14initializePinsEv+0x34a>
     204:	17 c5       	rjmp	.+2606   	; 0xc34 <_ZN8hardware14initializePinsEv+0x34e>
     206:	18 c5       	rjmp	.+2608   	; 0xc38 <_ZN8hardware14initializePinsEv+0x352>
     208:	1d c5       	rjmp	.+2618   	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     20a:	1c c5       	rjmp	.+2616   	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     20c:	1b c5       	rjmp	.+2614   	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     20e:	1a c5       	rjmp	.+2612   	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     210:	19 c5       	rjmp	.+2610   	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     212:	08 c5       	rjmp	.+2576   	; 0xc24 <_ZN8hardware14initializePinsEv+0x33e>
     214:	09 c5       	rjmp	.+2578   	; 0xc28 <_ZN8hardware14initializePinsEv+0x342>
     216:	0a c5       	rjmp	.+2580   	; 0xc2c <_ZN8hardware14initializePinsEv+0x346>
     218:	0b c5       	rjmp	.+2582   	; 0xc30 <_ZN8hardware14initializePinsEv+0x34a>
     21a:	0c c5       	rjmp	.+2584   	; 0xc34 <_ZN8hardware14initializePinsEv+0x34e>
     21c:	0d c5       	rjmp	.+2586   	; 0xc38 <_ZN8hardware14initializePinsEv+0x352>
     21e:	0e c5       	rjmp	.+2588   	; 0xc3c <_ZN8hardware14initializePinsEv+0x356>
     220:	01 c5       	rjmp	.+2562   	; 0xc24 <_ZN8hardware14initializePinsEv+0x33e>
     222:	02 c5       	rjmp	.+2564   	; 0xc28 <_ZN8hardware14initializePinsEv+0x342>
     224:	03 c5       	rjmp	.+2566   	; 0xc2c <_ZN8hardware14initializePinsEv+0x346>
     226:	4d c5       	rjmp	.+2714   	; 0xcc2 <_ZN8hardware14initializePinsEv+0x3dc>
     228:	4c c5       	rjmp	.+2712   	; 0xcc2 <_ZN8hardware14initializePinsEv+0x3dc>
     22a:	4e c5       	rjmp	.+2716   	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     22c:	4d c5       	rjmp	.+2714   	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     22e:	4c c5       	rjmp	.+2712   	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     230:	4b c5       	rjmp	.+2710   	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     232:	41 c5       	rjmp	.+2690   	; 0xcb6 <_ZN8hardware14initializePinsEv+0x3d0>
     234:	40 c5       	rjmp	.+2688   	; 0xcb6 <_ZN8hardware14initializePinsEv+0x3d0>
     236:	45 c5       	rjmp	.+2698   	; 0xcc2 <_ZN8hardware14initializePinsEv+0x3dc>
     238:	44 c5       	rjmp	.+2696   	; 0xcc2 <_ZN8hardware14initializePinsEv+0x3dc>
     23a:	43 c5       	rjmp	.+2694   	; 0xcc2 <_ZN8hardware14initializePinsEv+0x3dc>
     23c:	3c c5       	rjmp	.+2680   	; 0xcb6 <_ZN8hardware14initializePinsEv+0x3d0>
     23e:	3b c5       	rjmp	.+2678   	; 0xcb6 <_ZN8hardware14initializePinsEv+0x3d0>
     240:	3a c5       	rjmp	.+2676   	; 0xcb6 <_ZN8hardware14initializePinsEv+0x3d0>
     242:	39 c5       	rjmp	.+2674   	; 0xcb6 <_ZN8hardware14initializePinsEv+0x3d0>
     244:	38 c5       	rjmp	.+2672   	; 0xcb6 <_ZN8hardware14initializePinsEv+0x3d0>
     246:	37 c5       	rjmp	.+2670   	; 0xcb6 <_ZN8hardware14initializePinsEv+0x3d0>
     248:	3f c5       	rjmp	.+2686   	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     24a:	3e c5       	rjmp	.+2684   	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     24c:	3d c5       	rjmp	.+2682   	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     24e:	3c c5       	rjmp	.+2680   	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     250:	3b c5       	rjmp	.+2678   	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     252:	34 c5       	rjmp	.+2664   	; 0xcbc <_ZN8hardware14initializePinsEv+0x3d6>
     254:	33 c5       	rjmp	.+2662   	; 0xcbc <_ZN8hardware14initializePinsEv+0x3d6>
     256:	32 c5       	rjmp	.+2660   	; 0xcbc <_ZN8hardware14initializePinsEv+0x3d6>
     258:	31 c5       	rjmp	.+2658   	; 0xcbc <_ZN8hardware14initializePinsEv+0x3d6>
     25a:	30 c5       	rjmp	.+2656   	; 0xcbc <_ZN8hardware14initializePinsEv+0x3d6>
     25c:	2f c5       	rjmp	.+2654   	; 0xcbc <_ZN8hardware14initializePinsEv+0x3d6>
     25e:	2e c5       	rjmp	.+2652   	; 0xcbc <_ZN8hardware14initializePinsEv+0x3d6>
     260:	30 c5       	rjmp	.+2656   	; 0xcc2 <_ZN8hardware14initializePinsEv+0x3dc>
     262:	2f c5       	rjmp	.+2654   	; 0xcc2 <_ZN8hardware14initializePinsEv+0x3dc>
     264:	2e c5       	rjmp	.+2652   	; 0xcc2 <_ZN8hardware14initializePinsEv+0x3dc>
     266:	51 c5       	rjmp	.+2722   	; 0xd0a <_ZN8hardware14initializePinsEv+0x424>
     268:	52 c5       	rjmp	.+2724   	; 0xd0e <_ZN8hardware14initializePinsEv+0x428>
     26a:	59 c5       	rjmp	.+2738   	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     26c:	58 c5       	rjmp	.+2736   	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     26e:	57 c5       	rjmp	.+2734   	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     270:	56 c5       	rjmp	.+2732   	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     272:	51 c5       	rjmp	.+2722   	; 0xd16 <_ZN8hardware14initializePinsEv+0x430>
     274:	52 c5       	rjmp	.+2724   	; 0xd1a <_ZN8hardware14initializePinsEv+0x434>
     276:	4d c5       	rjmp	.+2714   	; 0xd12 <_ZN8hardware14initializePinsEv+0x42c>
     278:	4e c5       	rjmp	.+2716   	; 0xd16 <_ZN8hardware14initializePinsEv+0x430>
     27a:	4f c5       	rjmp	.+2718   	; 0xd1a <_ZN8hardware14initializePinsEv+0x434>
     27c:	40 c5       	rjmp	.+2688   	; 0xcfe <_ZN8hardware14initializePinsEv+0x418>
     27e:	41 c5       	rjmp	.+2690   	; 0xd02 <_ZN8hardware14initializePinsEv+0x41c>
     280:	42 c5       	rjmp	.+2692   	; 0xd06 <_ZN8hardware14initializePinsEv+0x420>
     282:	43 c5       	rjmp	.+2694   	; 0xd0a <_ZN8hardware14initializePinsEv+0x424>
     284:	44 c5       	rjmp	.+2696   	; 0xd0e <_ZN8hardware14initializePinsEv+0x428>
     286:	45 c5       	rjmp	.+2698   	; 0xd12 <_ZN8hardware14initializePinsEv+0x42c>
     288:	4a c5       	rjmp	.+2708   	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     28a:	49 c5       	rjmp	.+2706   	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     28c:	48 c5       	rjmp	.+2704   	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     28e:	47 c5       	rjmp	.+2702   	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     290:	46 c5       	rjmp	.+2700   	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     292:	35 c5       	rjmp	.+2666   	; 0xcfe <_ZN8hardware14initializePinsEv+0x418>
     294:	36 c5       	rjmp	.+2668   	; 0xd02 <_ZN8hardware14initializePinsEv+0x41c>
     296:	37 c5       	rjmp	.+2670   	; 0xd06 <_ZN8hardware14initializePinsEv+0x420>
     298:	38 c5       	rjmp	.+2672   	; 0xd0a <_ZN8hardware14initializePinsEv+0x424>
     29a:	39 c5       	rjmp	.+2674   	; 0xd0e <_ZN8hardware14initializePinsEv+0x428>
     29c:	3a c5       	rjmp	.+2676   	; 0xd12 <_ZN8hardware14initializePinsEv+0x42c>
     29e:	3b c5       	rjmp	.+2678   	; 0xd16 <_ZN8hardware14initializePinsEv+0x430>
     2a0:	2e c5       	rjmp	.+2652   	; 0xcfe <_ZN8hardware14initializePinsEv+0x418>
     2a2:	2f c5       	rjmp	.+2654   	; 0xd02 <_ZN8hardware14initializePinsEv+0x41c>
     2a4:	30 c5       	rjmp	.+2656   	; 0xd06 <_ZN8hardware14initializePinsEv+0x420>
     2a6:	7a c5       	rjmp	.+2804   	; 0xd9c <_ZN8hardware14initializePinsEv+0x4b6>
     2a8:	79 c5       	rjmp	.+2802   	; 0xd9c <_ZN8hardware14initializePinsEv+0x4b6>
     2aa:	7b c5       	rjmp	.+2806   	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     2ac:	7a c5       	rjmp	.+2804   	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     2ae:	79 c5       	rjmp	.+2802   	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     2b0:	78 c5       	rjmp	.+2800   	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     2b2:	6e c5       	rjmp	.+2780   	; 0xd90 <_ZN8hardware14initializePinsEv+0x4aa>
     2b4:	6d c5       	rjmp	.+2778   	; 0xd90 <_ZN8hardware14initializePinsEv+0x4aa>
     2b6:	72 c5       	rjmp	.+2788   	; 0xd9c <_ZN8hardware14initializePinsEv+0x4b6>
     2b8:	71 c5       	rjmp	.+2786   	; 0xd9c <_ZN8hardware14initializePinsEv+0x4b6>
     2ba:	70 c5       	rjmp	.+2784   	; 0xd9c <_ZN8hardware14initializePinsEv+0x4b6>
     2bc:	69 c5       	rjmp	.+2770   	; 0xd90 <_ZN8hardware14initializePinsEv+0x4aa>
     2be:	68 c5       	rjmp	.+2768   	; 0xd90 <_ZN8hardware14initializePinsEv+0x4aa>
     2c0:	67 c5       	rjmp	.+2766   	; 0xd90 <_ZN8hardware14initializePinsEv+0x4aa>
     2c2:	66 c5       	rjmp	.+2764   	; 0xd90 <_ZN8hardware14initializePinsEv+0x4aa>
     2c4:	65 c5       	rjmp	.+2762   	; 0xd90 <_ZN8hardware14initializePinsEv+0x4aa>
     2c6:	64 c5       	rjmp	.+2760   	; 0xd90 <_ZN8hardware14initializePinsEv+0x4aa>
     2c8:	6c c5       	rjmp	.+2776   	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     2ca:	6b c5       	rjmp	.+2774   	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     2cc:	6a c5       	rjmp	.+2772   	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     2ce:	69 c5       	rjmp	.+2770   	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     2d0:	68 c5       	rjmp	.+2768   	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     2d2:	61 c5       	rjmp	.+2754   	; 0xd96 <_ZN8hardware14initializePinsEv+0x4b0>
     2d4:	60 c5       	rjmp	.+2752   	; 0xd96 <_ZN8hardware14initializePinsEv+0x4b0>
     2d6:	5f c5       	rjmp	.+2750   	; 0xd96 <_ZN8hardware14initializePinsEv+0x4b0>
     2d8:	5e c5       	rjmp	.+2748   	; 0xd96 <_ZN8hardware14initializePinsEv+0x4b0>
     2da:	5d c5       	rjmp	.+2746   	; 0xd96 <_ZN8hardware14initializePinsEv+0x4b0>
     2dc:	5c c5       	rjmp	.+2744   	; 0xd96 <_ZN8hardware14initializePinsEv+0x4b0>
     2de:	5b c5       	rjmp	.+2742   	; 0xd96 <_ZN8hardware14initializePinsEv+0x4b0>
     2e0:	5d c5       	rjmp	.+2746   	; 0xd9c <_ZN8hardware14initializePinsEv+0x4b6>
     2e2:	5c c5       	rjmp	.+2744   	; 0xd9c <_ZN8hardware14initializePinsEv+0x4b6>
     2e4:	5b c5       	rjmp	.+2742   	; 0xd9c <_ZN8hardware14initializePinsEv+0x4b6>
     2e6:	7e c5       	rjmp	.+2812   	; 0xde4 <_ZN8hardware14initializePinsEv+0x4fe>
     2e8:	7f c5       	rjmp	.+2814   	; 0xde8 <_ZN8hardware14initializePinsEv+0x502>
     2ea:	86 c5       	rjmp	.+2828   	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     2ec:	85 c5       	rjmp	.+2826   	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     2ee:	84 c5       	rjmp	.+2824   	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     2f0:	83 c5       	rjmp	.+2822   	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     2f2:	7e c5       	rjmp	.+2812   	; 0xdf0 <_ZN8hardware14initializePinsEv+0x50a>
     2f4:	7f c5       	rjmp	.+2814   	; 0xdf4 <_ZN8hardware14initializePinsEv+0x50e>
     2f6:	7a c5       	rjmp	.+2804   	; 0xdec <_ZN8hardware14initializePinsEv+0x506>
     2f8:	7b c5       	rjmp	.+2806   	; 0xdf0 <_ZN8hardware14initializePinsEv+0x50a>
     2fa:	7c c5       	rjmp	.+2808   	; 0xdf4 <_ZN8hardware14initializePinsEv+0x50e>
     2fc:	6d c5       	rjmp	.+2778   	; 0xdd8 <_ZN8hardware14initializePinsEv+0x4f2>
     2fe:	6e c5       	rjmp	.+2780   	; 0xddc <_ZN8hardware14initializePinsEv+0x4f6>
     300:	6f c5       	rjmp	.+2782   	; 0xde0 <_ZN8hardware14initializePinsEv+0x4fa>
     302:	70 c5       	rjmp	.+2784   	; 0xde4 <_ZN8hardware14initializePinsEv+0x4fe>
     304:	71 c5       	rjmp	.+2786   	; 0xde8 <_ZN8hardware14initializePinsEv+0x502>
     306:	72 c5       	rjmp	.+2788   	; 0xdec <_ZN8hardware14initializePinsEv+0x506>
     308:	77 c5       	rjmp	.+2798   	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     30a:	76 c5       	rjmp	.+2796   	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     30c:	75 c5       	rjmp	.+2794   	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     30e:	74 c5       	rjmp	.+2792   	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     310:	73 c5       	rjmp	.+2790   	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     312:	62 c5       	rjmp	.+2756   	; 0xdd8 <_ZN8hardware14initializePinsEv+0x4f2>
     314:	63 c5       	rjmp	.+2758   	; 0xddc <_ZN8hardware14initializePinsEv+0x4f6>
     316:	64 c5       	rjmp	.+2760   	; 0xde0 <_ZN8hardware14initializePinsEv+0x4fa>
     318:	65 c5       	rjmp	.+2762   	; 0xde4 <_ZN8hardware14initializePinsEv+0x4fe>
     31a:	66 c5       	rjmp	.+2764   	; 0xde8 <_ZN8hardware14initializePinsEv+0x502>
     31c:	67 c5       	rjmp	.+2766   	; 0xdec <_ZN8hardware14initializePinsEv+0x506>
     31e:	68 c5       	rjmp	.+2768   	; 0xdf0 <_ZN8hardware14initializePinsEv+0x50a>
     320:	5b c5       	rjmp	.+2742   	; 0xdd8 <_ZN8hardware14initializePinsEv+0x4f2>
     322:	5c c5       	rjmp	.+2744   	; 0xddc <_ZN8hardware14initializePinsEv+0x4f6>
     324:	5d c5       	rjmp	.+2746   	; 0xde0 <_ZN8hardware14initializePinsEv+0x4fa>
     326:	a6 c5       	rjmp	.+2892   	; 0xe74 <_ZN8hardware14initializePinsEv+0x58e>
     328:	a5 c5       	rjmp	.+2890   	; 0xe74 <_ZN8hardware14initializePinsEv+0x58e>
     32a:	a7 c5       	rjmp	.+2894   	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     32c:	a6 c5       	rjmp	.+2892   	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     32e:	a5 c5       	rjmp	.+2890   	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     330:	a4 c5       	rjmp	.+2888   	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     332:	9a c5       	rjmp	.+2868   	; 0xe68 <_ZN8hardware14initializePinsEv+0x582>
     334:	99 c5       	rjmp	.+2866   	; 0xe68 <_ZN8hardware14initializePinsEv+0x582>
     336:	9e c5       	rjmp	.+2876   	; 0xe74 <_ZN8hardware14initializePinsEv+0x58e>
     338:	9d c5       	rjmp	.+2874   	; 0xe74 <_ZN8hardware14initializePinsEv+0x58e>
     33a:	9c c5       	rjmp	.+2872   	; 0xe74 <_ZN8hardware14initializePinsEv+0x58e>
     33c:	95 c5       	rjmp	.+2858   	; 0xe68 <_ZN8hardware14initializePinsEv+0x582>
     33e:	94 c5       	rjmp	.+2856   	; 0xe68 <_ZN8hardware14initializePinsEv+0x582>
     340:	93 c5       	rjmp	.+2854   	; 0xe68 <_ZN8hardware14initializePinsEv+0x582>
     342:	92 c5       	rjmp	.+2852   	; 0xe68 <_ZN8hardware14initializePinsEv+0x582>
     344:	91 c5       	rjmp	.+2850   	; 0xe68 <_ZN8hardware14initializePinsEv+0x582>
     346:	90 c5       	rjmp	.+2848   	; 0xe68 <_ZN8hardware14initializePinsEv+0x582>
     348:	98 c5       	rjmp	.+2864   	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     34a:	97 c5       	rjmp	.+2862   	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     34c:	96 c5       	rjmp	.+2860   	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     34e:	95 c5       	rjmp	.+2858   	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     350:	94 c5       	rjmp	.+2856   	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     352:	8d c5       	rjmp	.+2842   	; 0xe6e <_ZN8hardware14initializePinsEv+0x588>
     354:	8c c5       	rjmp	.+2840   	; 0xe6e <_ZN8hardware14initializePinsEv+0x588>
     356:	8b c5       	rjmp	.+2838   	; 0xe6e <_ZN8hardware14initializePinsEv+0x588>
     358:	8a c5       	rjmp	.+2836   	; 0xe6e <_ZN8hardware14initializePinsEv+0x588>
     35a:	89 c5       	rjmp	.+2834   	; 0xe6e <_ZN8hardware14initializePinsEv+0x588>
     35c:	88 c5       	rjmp	.+2832   	; 0xe6e <_ZN8hardware14initializePinsEv+0x588>
     35e:	87 c5       	rjmp	.+2830   	; 0xe6e <_ZN8hardware14initializePinsEv+0x588>
     360:	89 c5       	rjmp	.+2834   	; 0xe74 <_ZN8hardware14initializePinsEv+0x58e>
     362:	88 c5       	rjmp	.+2832   	; 0xe74 <_ZN8hardware14initializePinsEv+0x58e>
     364:	87 c5       	rjmp	.+2830   	; 0xe74 <_ZN8hardware14initializePinsEv+0x58e>
     366:	aa c5       	rjmp	.+2900   	; 0xebc <_ZN8hardware14initializePinsEv+0x5d6>
     368:	ab c5       	rjmp	.+2902   	; 0xec0 <_ZN8hardware14initializePinsEv+0x5da>
     36a:	b2 c5       	rjmp	.+2916   	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     36c:	b1 c5       	rjmp	.+2914   	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     36e:	b0 c5       	rjmp	.+2912   	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     370:	af c5       	rjmp	.+2910   	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     372:	aa c5       	rjmp	.+2900   	; 0xec8 <_ZN8hardware14initializePinsEv+0x5e2>
     374:	ab c5       	rjmp	.+2902   	; 0xecc <_ZN8hardware14initializePinsEv+0x5e6>
     376:	a6 c5       	rjmp	.+2892   	; 0xec4 <_ZN8hardware14initializePinsEv+0x5de>
     378:	a7 c5       	rjmp	.+2894   	; 0xec8 <_ZN8hardware14initializePinsEv+0x5e2>
     37a:	a8 c5       	rjmp	.+2896   	; 0xecc <_ZN8hardware14initializePinsEv+0x5e6>
     37c:	99 c5       	rjmp	.+2866   	; 0xeb0 <_ZN8hardware14initializePinsEv+0x5ca>
     37e:	9a c5       	rjmp	.+2868   	; 0xeb4 <_ZN8hardware14initializePinsEv+0x5ce>
     380:	9b c5       	rjmp	.+2870   	; 0xeb8 <_ZN8hardware14initializePinsEv+0x5d2>
     382:	9c c5       	rjmp	.+2872   	; 0xebc <_ZN8hardware14initializePinsEv+0x5d6>
     384:	9d c5       	rjmp	.+2874   	; 0xec0 <_ZN8hardware14initializePinsEv+0x5da>
     386:	9e c5       	rjmp	.+2876   	; 0xec4 <_ZN8hardware14initializePinsEv+0x5de>
     388:	a3 c5       	rjmp	.+2886   	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     38a:	a2 c5       	rjmp	.+2884   	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     38c:	a1 c5       	rjmp	.+2882   	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     38e:	a0 c5       	rjmp	.+2880   	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     390:	9f c5       	rjmp	.+2878   	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     392:	8e c5       	rjmp	.+2844   	; 0xeb0 <_ZN8hardware14initializePinsEv+0x5ca>
     394:	8f c5       	rjmp	.+2846   	; 0xeb4 <_ZN8hardware14initializePinsEv+0x5ce>
     396:	90 c5       	rjmp	.+2848   	; 0xeb8 <_ZN8hardware14initializePinsEv+0x5d2>
     398:	91 c5       	rjmp	.+2850   	; 0xebc <_ZN8hardware14initializePinsEv+0x5d6>
     39a:	92 c5       	rjmp	.+2852   	; 0xec0 <_ZN8hardware14initializePinsEv+0x5da>
     39c:	93 c5       	rjmp	.+2854   	; 0xec4 <_ZN8hardware14initializePinsEv+0x5de>
     39e:	94 c5       	rjmp	.+2856   	; 0xec8 <_ZN8hardware14initializePinsEv+0x5e2>
     3a0:	87 c5       	rjmp	.+2830   	; 0xeb0 <_ZN8hardware14initializePinsEv+0x5ca>
     3a2:	88 c5       	rjmp	.+2832   	; 0xeb4 <_ZN8hardware14initializePinsEv+0x5ce>
     3a4:	89 c5       	rjmp	.+2834   	; 0xeb8 <_ZN8hardware14initializePinsEv+0x5d2>
     3a6:	f1 c5       	rjmp	.+3042   	; 0xf8a <_ZN8hardware9setBuzzerEh+0x5a>
     3a8:	f0 c5       	rjmp	.+3040   	; 0xf8a <_ZN8hardware9setBuzzerEh+0x5a>
     3aa:	f2 c5       	rjmp	.+3044   	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     3ac:	f1 c5       	rjmp	.+3042   	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     3ae:	f0 c5       	rjmp	.+3040   	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     3b0:	ef c5       	rjmp	.+3038   	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     3b2:	e5 c5       	rjmp	.+3018   	; 0xf7e <_ZN8hardware9setBuzzerEh+0x4e>
     3b4:	e4 c5       	rjmp	.+3016   	; 0xf7e <_ZN8hardware9setBuzzerEh+0x4e>
     3b6:	e9 c5       	rjmp	.+3026   	; 0xf8a <_ZN8hardware9setBuzzerEh+0x5a>
     3b8:	e8 c5       	rjmp	.+3024   	; 0xf8a <_ZN8hardware9setBuzzerEh+0x5a>
     3ba:	e7 c5       	rjmp	.+3022   	; 0xf8a <_ZN8hardware9setBuzzerEh+0x5a>
     3bc:	e0 c5       	rjmp	.+3008   	; 0xf7e <_ZN8hardware9setBuzzerEh+0x4e>
     3be:	df c5       	rjmp	.+3006   	; 0xf7e <_ZN8hardware9setBuzzerEh+0x4e>
     3c0:	de c5       	rjmp	.+3004   	; 0xf7e <_ZN8hardware9setBuzzerEh+0x4e>
     3c2:	dd c5       	rjmp	.+3002   	; 0xf7e <_ZN8hardware9setBuzzerEh+0x4e>
     3c4:	dc c5       	rjmp	.+3000   	; 0xf7e <_ZN8hardware9setBuzzerEh+0x4e>
     3c6:	db c5       	rjmp	.+2998   	; 0xf7e <_ZN8hardware9setBuzzerEh+0x4e>
     3c8:	e3 c5       	rjmp	.+3014   	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     3ca:	e2 c5       	rjmp	.+3012   	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     3cc:	e1 c5       	rjmp	.+3010   	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     3ce:	e0 c5       	rjmp	.+3008   	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     3d0:	df c5       	rjmp	.+3006   	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     3d2:	d8 c5       	rjmp	.+2992   	; 0xf84 <_ZN8hardware9setBuzzerEh+0x54>
     3d4:	d7 c5       	rjmp	.+2990   	; 0xf84 <_ZN8hardware9setBuzzerEh+0x54>
     3d6:	d6 c5       	rjmp	.+2988   	; 0xf84 <_ZN8hardware9setBuzzerEh+0x54>
     3d8:	d5 c5       	rjmp	.+2986   	; 0xf84 <_ZN8hardware9setBuzzerEh+0x54>
     3da:	d4 c5       	rjmp	.+2984   	; 0xf84 <_ZN8hardware9setBuzzerEh+0x54>
     3dc:	d3 c5       	rjmp	.+2982   	; 0xf84 <_ZN8hardware9setBuzzerEh+0x54>
     3de:	d2 c5       	rjmp	.+2980   	; 0xf84 <_ZN8hardware9setBuzzerEh+0x54>
     3e0:	d4 c5       	rjmp	.+2984   	; 0xf8a <_ZN8hardware9setBuzzerEh+0x5a>
     3e2:	d3 c5       	rjmp	.+2982   	; 0xf8a <_ZN8hardware9setBuzzerEh+0x5a>
     3e4:	d2 c5       	rjmp	.+2980   	; 0xf8a <_ZN8hardware9setBuzzerEh+0x5a>
     3e6:	f5 c5       	rjmp	.+3050   	; 0xfd2 <_ZN8hardware9setBuzzerEh+0xa2>
     3e8:	f6 c5       	rjmp	.+3052   	; 0xfd6 <_ZN8hardware9setBuzzerEh+0xa6>
     3ea:	fd c5       	rjmp	.+3066   	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     3ec:	fc c5       	rjmp	.+3064   	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     3ee:	fb c5       	rjmp	.+3062   	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     3f0:	fa c5       	rjmp	.+3060   	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     3f2:	f5 c5       	rjmp	.+3050   	; 0xfde <_ZN8hardware9setBuzzerEh+0xae>
     3f4:	f6 c5       	rjmp	.+3052   	; 0xfe2 <_ZN8hardware9setBuzzerEh+0xb2>
     3f6:	f1 c5       	rjmp	.+3042   	; 0xfda <_ZN8hardware9setBuzzerEh+0xaa>
     3f8:	f2 c5       	rjmp	.+3044   	; 0xfde <_ZN8hardware9setBuzzerEh+0xae>
     3fa:	f3 c5       	rjmp	.+3046   	; 0xfe2 <_ZN8hardware9setBuzzerEh+0xb2>
     3fc:	e4 c5       	rjmp	.+3016   	; 0xfc6 <_ZN8hardware9setBuzzerEh+0x96>
     3fe:	e5 c5       	rjmp	.+3018   	; 0xfca <_ZN8hardware9setBuzzerEh+0x9a>
     400:	e6 c5       	rjmp	.+3020   	; 0xfce <_ZN8hardware9setBuzzerEh+0x9e>
     402:	e7 c5       	rjmp	.+3022   	; 0xfd2 <_ZN8hardware9setBuzzerEh+0xa2>
     404:	e8 c5       	rjmp	.+3024   	; 0xfd6 <_ZN8hardware9setBuzzerEh+0xa6>
     406:	e9 c5       	rjmp	.+3026   	; 0xfda <_ZN8hardware9setBuzzerEh+0xaa>
     408:	ee c5       	rjmp	.+3036   	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     40a:	ed c5       	rjmp	.+3034   	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     40c:	ec c5       	rjmp	.+3032   	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     40e:	eb c5       	rjmp	.+3030   	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     410:	ea c5       	rjmp	.+3028   	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     412:	d9 c5       	rjmp	.+2994   	; 0xfc6 <_ZN8hardware9setBuzzerEh+0x96>
     414:	da c5       	rjmp	.+2996   	; 0xfca <_ZN8hardware9setBuzzerEh+0x9a>
     416:	db c5       	rjmp	.+2998   	; 0xfce <_ZN8hardware9setBuzzerEh+0x9e>
     418:	dc c5       	rjmp	.+3000   	; 0xfd2 <_ZN8hardware9setBuzzerEh+0xa2>
     41a:	dd c5       	rjmp	.+3002   	; 0xfd6 <_ZN8hardware9setBuzzerEh+0xa6>
     41c:	de c5       	rjmp	.+3004   	; 0xfda <_ZN8hardware9setBuzzerEh+0xaa>
     41e:	df c5       	rjmp	.+3006   	; 0xfde <_ZN8hardware9setBuzzerEh+0xae>
     420:	d2 c5       	rjmp	.+2980   	; 0xfc6 <_ZN8hardware9setBuzzerEh+0x96>
     422:	d3 c5       	rjmp	.+2982   	; 0xfca <_ZN8hardware9setBuzzerEh+0x9a>
     424:	d4 c5       	rjmp	.+2984   	; 0xfce <_ZN8hardware9setBuzzerEh+0x9e>
     426:	aa c6       	rjmp	.+3412   	; 0x117c <_ZN6Buzzer8getSoundEj+0x3a>
     428:	ad c6       	rjmp	.+3418   	; 0x1184 <_ZN6Buzzer8getSoundEj+0x42>
     42a:	b0 c6       	rjmp	.+3424   	; 0x118c <_ZN6Buzzer8getSoundEj+0x4a>
     42c:	b3 c6       	rjmp	.+3430   	; 0x1194 <_ZN6Buzzer8getSoundEj+0x52>
     42e:	ba c6       	rjmp	.+3444   	; 0x11a4 <_ZN6Buzzer8getSoundEj+0x62>
     430:	b5 c6       	rjmp	.+3434   	; 0x119c <_ZN6Buzzer8getSoundEj+0x5a>
     432:	c0 c6       	rjmp	.+3456   	; 0x11b4 <_ZN6Buzzer8getSoundEj+0x72>
     434:	bb c6       	rjmp	.+3446   	; 0x11ac <_ZN6Buzzer8getSoundEj+0x6a>

00000436 <__trampolines_end>:
     436:	46 00       	.word	0x0046	; ????
     438:	03 00       	.word	0x0003	; ????
     43a:	88 13       	cpse	r24, r24
     43c:	70 17       	cp	r23, r16
     43e:	01 00       	.word	0x0001	; ????
     440:	32 00       	.word	0x0032	; ????
     442:	88 13       	cpse	r24, r24
     444:	32 00       	.word	0x0032	; ????
     446:	e8 03       	fmulsu	r22, r16
     448:	10 27       	eor	r17, r16
     44a:	00 00       	nop
     44c:	00 00       	nop
     44e:	03 00       	.word	0x0003	; ????
     450:	00 00       	nop
     452:	00 00       	nop
     454:	01 00       	.word	0x0001	; ????
     456:	00 00       	nop
	...

0000045a <_ZN8Settings14UARTSpeedValueE>:
     45a:	80 25 00 00 00 4b 00 00 00 96 00 00 00 e1 00 00     .%...K..........
     46a:	00 c2 01 00                                         ....

0000046e <__ctors_end>:
     46e:	11 24       	eor	r1, r1
     470:	1f be       	out	0x3f, r1	; 63
     472:	cf e5       	ldi	r28, 0x5F	; 95
     474:	d4 e0       	ldi	r29, 0x04	; 4
     476:	de bf       	out	0x3e, r29	; 62
     478:	cd bf       	out	0x3d, r28	; 61

0000047a <__do_copy_data>:
     47a:	10 e0       	ldi	r17, 0x00	; 0
     47c:	a0 e6       	ldi	r26, 0x60	; 96
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e6 e4       	ldi	r30, 0x46	; 70
     482:	ff e1       	ldi	r31, 0x1F	; 31
     484:	02 c0       	rjmp	.+4      	; 0x48a <__do_copy_data+0x10>
     486:	05 90       	lpm	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	ae 36       	cpi	r26, 0x6E	; 110
     48c:	b1 07       	cpc	r27, r17
     48e:	d9 f7       	brne	.-10     	; 0x486 <__do_copy_data+0xc>

00000490 <__do_clear_bss>:
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	ae e6       	ldi	r26, 0x6E	; 110
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	01 c0       	rjmp	.+2      	; 0x49a <.do_clear_bss_start>

00000498 <.do_clear_bss_loop>:
     498:	1d 92       	st	X+, r1

0000049a <.do_clear_bss_start>:
     49a:	ac 39       	cpi	r26, 0x9C	; 156
     49c:	b2 07       	cpc	r27, r18
     49e:	e1 f7       	brne	.-8      	; 0x498 <.do_clear_bss_loop>
     4a0:	bd d9       	rcall	.-3206   	; 0xfffff81c <__eeprom_end+0xff7ef81c>
     4a2:	4f cd       	rjmp	.-1378   	; 0xffffff42 <__eeprom_end+0xff7eff42>

000004a4 <__bad_interrupt>:
     4a4:	ad cd       	rjmp	.-1190   	; 0x0 <__vectors>

000004a6 <__vector_3>:


// time measurement - It uses atmega8/Timer2 to measure TIMER_INTERRUPT_PERIOD_MICROSECONDS

ISR(TIMER2_COMP_vect)
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	2f 93       	push	r18
     4b4:	3f 93       	push	r19
     4b6:	4f 93       	push	r20
     4b8:	5f 93       	push	r21
     4ba:	6f 93       	push	r22
     4bc:	7f 93       	push	r23
     4be:	8f 93       	push	r24
     4c0:	9f 93       	push	r25
     4c2:	af 93       	push	r26
     4c4:	bf 93       	push	r27
     4c6:	ef 93       	push	r30
     4c8:	ff 93       	push	r31
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
    Time::callback();
     4d2:	c7 d8       	rcall	.-3698   	; 0xfffff662 <__eeprom_end+0xff7ef662>
}
     4d4:	00 00       	nop
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     4f8:	0f 90       	pop	r0
     4fa:	1f 90       	pop	r1
     4fc:	18 95       	reti

000004fe <_ZN4Time10initializeEv>:


void Time::initialize()
{
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
#endif
#if TIMER_INTERRUPT_PERIOD_MICROSECONDS != 500
#error "TIMER_INTERRUPT_PERIOD_MICROSECONDS != 500 - not implemented"
#endif

    TCCR2=(1<<WGM21);               //Clear Timer on Compare Match (CTC) Mode
     506:	85 e4       	ldi	r24, 0x45	; 69
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	28 e0       	ldi	r18, 0x08	; 8
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
    TCCR2|=(1 << CS22);             //clk/64 (From prescaler)
     510:	85 e4       	ldi	r24, 0x45	; 69
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	25 e4       	ldi	r18, 0x45	; 69
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	24 60       	ori	r18, 0x04	; 4
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18

    TCNT2=0;
     522:	84 e4       	ldi	r24, 0x44	; 68
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	fc 01       	movw	r30, r24
     528:	10 82       	st	Z, r1
    OCR2=TIMER_INTERRUPT_PERIOD_MICROSECONDS/8 - 1;
     52a:	83 e4       	ldi	r24, 0x43	; 67
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	2d e3       	ldi	r18, 0x3D	; 61
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18

    TIMSK|=(1<<OCIE2);              //OCIE2: Timer/Counter2 Output Compare Match Interrupt Enable
     534:	89 e5       	ldi	r24, 0x59	; 89
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	29 e5       	ldi	r18, 0x59	; 89
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	f9 01       	movw	r30, r18
     53e:	20 81       	ld	r18, Z
     540:	20 68       	ori	r18, 0x80	; 128
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
}
     546:	00 00       	nop
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	08 95       	ret

0000054e <_ZN5Utils20delayTenMicrosecondsEj>:

namespace Utils
{
    // Accuracy of this is probably low but does that matter for us?
    void delayTenMicroseconds(uint16_t value)
    {
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	a2 97       	sbiw	r28, 0x22	; 34
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	9a a3       	std	Y+34, r25	; 0x22
     564:	89 a3       	std	Y+33, r24	; 0x21
        if (value >= 100) {
     566:	89 a1       	ldd	r24, Y+33	; 0x21
     568:	9a a1       	ldd	r25, Y+34	; 0x22
     56a:	84 36       	cpi	r24, 0x64	; 100
     56c:	91 05       	cpc	r25, r1
     56e:	70 f0       	brcs	.+28     	; 0x58c <_ZN5Utils20delayTenMicrosecondsEj+0x3e>
            Utils::delayMilliseconds(value/100);
     570:	89 a1       	ldd	r24, Y+33	; 0x21
     572:	9a a1       	ldd	r25, Y+34	; 0x22
     574:	96 95       	lsr	r25
     576:	87 95       	ror	r24
     578:	96 95       	lsr	r25
     57a:	87 95       	ror	r24
     57c:	9c 01       	movw	r18, r24
     57e:	ab e7       	ldi	r26, 0x7B	; 123
     580:	b4 e1       	ldi	r27, 0x14	; 20
     582:	f1 da       	rcall	.-2590   	; 0xfffffb66 <__eeprom_end+0xff7efb66>
     584:	96 95       	lsr	r25
     586:	87 95       	ror	r24
     588:	15 d1       	rcall	.+554    	; 0x7b4 <_ZN5Utils17delayMillisecondsEj>
        } else {
            while (value--) {
                _delay_us(10);
            }
        }
        return;
     58a:	f0 c0       	rjmp	.+480    	; 0x76c <_ZN5Utils20delayTenMicrosecondsEj+0x21e>
    void delayTenMicroseconds(uint16_t value)
    {
        if (value >= 100) {
            Utils::delayMilliseconds(value/100);
        } else {
            while (value--) {
     58c:	89 a1       	ldd	r24, Y+33	; 0x21
     58e:	9a a1       	ldd	r25, Y+34	; 0x22
     590:	9c 01       	movw	r18, r24
     592:	21 50       	subi	r18, 0x01	; 1
     594:	31 09       	sbc	r19, r1
     596:	3a a3       	std	Y+34, r19	; 0x22
     598:	29 a3       	std	Y+33, r18	; 0x21
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	89 2b       	or	r24, r25
     59e:	09 f4       	brne	.+2      	; 0x5a2 <_ZN5Utils20delayTenMicrosecondsEj+0x54>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	22 23       	and	r18, r18
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <_ZN5Utils20delayTenMicrosecondsEj+0x5a>
     5a6:	e2 c0       	rjmp	.+452    	; 0x76c <_ZN5Utils20delayTenMicrosecondsEj+0x21e>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	a0 e2       	ldi	r26, 0x20	; 32
     5ae:	b1 e4       	ldi	r27, 0x41	; 65
     5b0:	89 83       	std	Y+1, r24	; 0x01
     5b2:	9a 83       	std	Y+2, r25	; 0x02
     5b4:	ab 83       	std	Y+3, r26	; 0x03
     5b6:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     5b8:	2b ea       	ldi	r18, 0xAB	; 171
     5ba:	3a ea       	ldi	r19, 0xAA	; 170
     5bc:	4a e2       	ldi	r20, 0x2A	; 42
     5be:	50 e4       	ldi	r21, 0x40	; 64
     5c0:	69 81       	ldd	r22, Y+1	; 0x01
     5c2:	7a 81       	ldd	r23, Y+2	; 0x02
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	50 dc       	rcall	.-1888   	; 0xfffffe6a <__eeprom_end+0xff7efe6a>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	8d 83       	std	Y+5, r24	; 0x05
     5d0:	9e 83       	std	Y+6, r25	; 0x06
     5d2:	af 83       	std	Y+7, r26	; 0x07
     5d4:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	ab 81       	ldd	r26, Y+3	; 0x03
     5dc:	bc 81       	ldd	r27, Y+4	; 0x04
     5de:	9c 01       	movw	r18, r24
     5e0:	ad 01       	movw	r20, r26
     5e2:	bc 01       	movw	r22, r24
     5e4:	cd 01       	movw	r24, r26
     5e6:	cc da       	rcall	.-2664   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	89 87       	std	Y+9, r24	; 0x09
     5ee:	9a 87       	std	Y+10, r25	; 0x0a
     5f0:	ab 87       	std	Y+11, r26	; 0x0b
     5f2:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e8       	ldi	r20, 0x80	; 128
     5fa:	5f e3       	ldi	r21, 0x3F	; 63
     5fc:	6d 81       	ldd	r22, Y+5	; 0x05
     5fe:	7e 81       	ldd	r23, Y+6	; 0x06
     600:	8f 81       	ldd	r24, Y+7	; 0x07
     602:	98 85       	ldd	r25, Y+8	; 0x08
     604:	21 db       	rcall	.-2494   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     606:	88 23       	and	r24, r24
     608:	1c f4       	brge	.+6      	; 0x610 <_ZN5Utils20delayTenMicrosecondsEj+0xc2>
		__ticks = 1;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	8d 87       	std	Y+13, r24	; 0x0d
     60e:	a7 c0       	rjmp	.+334    	; 0x75e <_ZN5Utils20delayTenMicrosecondsEj+0x210>
	else if (__tmp2 > 65535)
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	3f ef       	ldi	r19, 0xFF	; 255
     614:	4f e7       	ldi	r20, 0x7F	; 127
     616:	57 e4       	ldi	r21, 0x47	; 71
     618:	69 85       	ldd	r22, Y+9	; 0x09
     61a:	7a 85       	ldd	r23, Y+10	; 0x0a
     61c:	8b 85       	ldd	r24, Y+11	; 0x0b
     61e:	9c 85       	ldd	r25, Y+12	; 0x0c
     620:	20 dc       	rcall	.-1984   	; 0xfffffe62 <__eeprom_end+0xff7efe62>
     622:	18 16       	cp	r1, r24
     624:	0c f0       	brlt	.+2      	; 0x628 <_ZN5Utils20delayTenMicrosecondsEj+0xda>
     626:	74 c0       	rjmp	.+232    	; 0x710 <_ZN5Utils20delayTenMicrosecondsEj+0x1c2>
	{
		_delay_ms(__us / 1000.0);
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	4a e7       	ldi	r20, 0x7A	; 122
     62e:	54 e4       	ldi	r21, 0x44	; 68
     630:	69 81       	ldd	r22, Y+1	; 0x01
     632:	7a 81       	ldd	r23, Y+2	; 0x02
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	9c 81       	ldd	r25, Y+4	; 0x04
     638:	0b db       	rcall	.-2538   	; 0xfffffc50 <__eeprom_end+0xff7efc50>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	8e 87       	std	Y+14, r24	; 0x0e
     640:	9f 87       	std	Y+15, r25	; 0x0f
     642:	a8 8b       	std	Y+16, r26	; 0x10
     644:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	4a ef       	ldi	r20, 0xFA	; 250
     64c:	54 e4       	ldi	r21, 0x44	; 68
     64e:	6e 85       	ldd	r22, Y+14	; 0x0e
     650:	7f 85       	ldd	r23, Y+15	; 0x0f
     652:	88 89       	ldd	r24, Y+16	; 0x10
     654:	99 89       	ldd	r25, Y+17	; 0x11
     656:	09 dc       	rcall	.-2030   	; 0xfffffe6a <__eeprom_end+0xff7efe6a>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	8a 8b       	std	Y+18, r24	; 0x12
     65e:	9b 8b       	std	Y+19, r25	; 0x13
     660:	ac 8b       	std	Y+20, r26	; 0x14
     662:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e8       	ldi	r20, 0x80	; 128
     66a:	5f e3       	ldi	r21, 0x3F	; 63
     66c:	6a 89       	ldd	r22, Y+18	; 0x12
     66e:	7b 89       	ldd	r23, Y+19	; 0x13
     670:	8c 89       	ldd	r24, Y+20	; 0x14
     672:	9d 89       	ldd	r25, Y+21	; 0x15
     674:	e9 da       	rcall	.-2606   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     676:	88 23       	and	r24, r24
     678:	2c f4       	brge	.+10     	; 0x684 <_ZN5Utils20delayTenMicrosecondsEj+0x136>
		__ticks = 1;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	9f 8b       	std	Y+23, r25	; 0x17
     680:	8e 8b       	std	Y+22, r24	; 0x16
     682:	3b c0       	rjmp	.+118    	; 0x6fa <_ZN5Utils20delayTenMicrosecondsEj+0x1ac>
	else if (__tmp > 65535)
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	3f ef       	ldi	r19, 0xFF	; 255
     688:	4f e7       	ldi	r20, 0x7F	; 127
     68a:	57 e4       	ldi	r21, 0x47	; 71
     68c:	6a 89       	ldd	r22, Y+18	; 0x12
     68e:	7b 89       	ldd	r23, Y+19	; 0x13
     690:	8c 89       	ldd	r24, Y+20	; 0x14
     692:	9d 89       	ldd	r25, Y+21	; 0x15
     694:	e6 db       	rcall	.-2100   	; 0xfffffe62 <__eeprom_end+0xff7efe62>
     696:	18 16       	cp	r1, r24
     698:	3c f5       	brge	.+78     	; 0x6e8 <_ZN5Utils20delayTenMicrosecondsEj+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e2       	ldi	r20, 0x20	; 32
     6a0:	51 e4       	ldi	r21, 0x41	; 65
     6a2:	6e 85       	ldd	r22, Y+14	; 0x0e
     6a4:	7f 85       	ldd	r23, Y+15	; 0x0f
     6a6:	88 89       	ldd	r24, Y+16	; 0x10
     6a8:	99 89       	ldd	r25, Y+17	; 0x11
     6aa:	df db       	rcall	.-2114   	; 0xfffffe6a <__eeprom_end+0xff7efe6a>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	bc 01       	movw	r22, r24
     6b2:	cd 01       	movw	r24, r26
     6b4:	35 db       	rcall	.-2454   	; 0xfffffd20 <__eeprom_end+0xff7efd20>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	9f 8b       	std	Y+23, r25	; 0x17
     6bc:	8e 8b       	std	Y+22, r24	; 0x16
		while(__ticks)
     6be:	8e 89       	ldd	r24, Y+22	; 0x16
     6c0:	9f 89       	ldd	r25, Y+23	; 0x17
     6c2:	89 2b       	or	r24, r25
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <_ZN5Utils20delayTenMicrosecondsEj+0x17a>
     6c6:	4b c0       	rjmp	.+150    	; 0x75e <_ZN5Utils20delayTenMicrosecondsEj+0x210>
     6c8:	88 ec       	ldi	r24, 0xC8	; 200
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	99 8f       	std	Y+25, r25	; 0x19
     6ce:	88 8f       	std	Y+24, r24	; 0x18
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     6d0:	88 8d       	ldd	r24, Y+24	; 0x18
     6d2:	99 8d       	ldd	r25, Y+25	; 0x19
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <_ZN5Utils20delayTenMicrosecondsEj+0x186>
     6d8:	99 8f       	std	Y+25, r25	; 0x19
     6da:	88 8f       	std	Y+24, r24	; 0x18
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6dc:	8e 89       	ldd	r24, Y+22	; 0x16
     6de:	9f 89       	ldd	r25, Y+23	; 0x17
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	9f 8b       	std	Y+23, r25	; 0x17
     6e4:	8e 8b       	std	Y+22, r24	; 0x16
     6e6:	eb cf       	rjmp	.-42     	; 0x6be <_ZN5Utils20delayTenMicrosecondsEj+0x170>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e8:	6a 89       	ldd	r22, Y+18	; 0x12
     6ea:	7b 89       	ldd	r23, Y+19	; 0x13
     6ec:	8c 89       	ldd	r24, Y+20	; 0x14
     6ee:	9d 89       	ldd	r25, Y+21	; 0x15
     6f0:	17 db       	rcall	.-2514   	; 0xfffffd20 <__eeprom_end+0xff7efd20>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	9f 8b       	std	Y+23, r25	; 0x17
     6f8:	8e 8b       	std	Y+22, r24	; 0x16
     6fa:	8e 89       	ldd	r24, Y+22	; 0x16
     6fc:	9f 89       	ldd	r25, Y+23	; 0x17
     6fe:	9b 8f       	std	Y+27, r25	; 0x1b
     700:	8a 8f       	std	Y+26, r24	; 0x1a
     702:	8a 8d       	ldd	r24, Y+26	; 0x1a
     704:	9b 8d       	ldd	r25, Y+27	; 0x1b
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <_ZN5Utils20delayTenMicrosecondsEj+0x1b8>
     70a:	9b 8f       	std	Y+27, r25	; 0x1b
     70c:	8a 8f       	std	Y+26, r24	; 0x1a
     70e:	27 c0       	rjmp	.+78     	; 0x75e <_ZN5Utils20delayTenMicrosecondsEj+0x210>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	4f e7       	ldi	r20, 0x7F	; 127
     716:	53 e4       	ldi	r21, 0x43	; 67
     718:	6d 81       	ldd	r22, Y+5	; 0x05
     71a:	7e 81       	ldd	r23, Y+6	; 0x06
     71c:	8f 81       	ldd	r24, Y+7	; 0x07
     71e:	98 85       	ldd	r25, Y+8	; 0x08
     720:	a0 db       	rcall	.-2240   	; 0xfffffe62 <__eeprom_end+0xff7efe62>
     722:	18 16       	cp	r1, r24
     724:	a4 f4       	brge	.+40     	; 0x74e <_ZN5Utils20delayTenMicrosecondsEj+0x200>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     726:	69 85       	ldd	r22, Y+9	; 0x09
     728:	7a 85       	ldd	r23, Y+10	; 0x0a
     72a:	8b 85       	ldd	r24, Y+11	; 0x0b
     72c:	9c 85       	ldd	r25, Y+12	; 0x0c
     72e:	f8 da       	rcall	.-2576   	; 0xfffffd20 <__eeprom_end+0xff7efd20>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	9d 8f       	std	Y+29, r25	; 0x1d
     736:	8c 8f       	std	Y+28, r24	; 0x1c
     738:	8c 8d       	ldd	r24, Y+28	; 0x1c
     73a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     73c:	9f 8f       	std	Y+31, r25	; 0x1f
     73e:	8e 8f       	std	Y+30, r24	; 0x1e
     740:	8e 8d       	ldd	r24, Y+30	; 0x1e
     742:	9f 8d       	ldd	r25, Y+31	; 0x1f
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <_ZN5Utils20delayTenMicrosecondsEj+0x1f6>
     748:	9f 8f       	std	Y+31, r25	; 0x1f
     74a:	8e 8f       	std	Y+30, r24	; 0x1e
     74c:	1f cf       	rjmp	.-450    	; 0x58c <_ZN5Utils20delayTenMicrosecondsEj+0x3e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     74e:	6d 81       	ldd	r22, Y+5	; 0x05
     750:	7e 81       	ldd	r23, Y+6	; 0x06
     752:	8f 81       	ldd	r24, Y+7	; 0x07
     754:	98 85       	ldd	r25, Y+8	; 0x08
     756:	e4 da       	rcall	.-2616   	; 0xfffffd20 <__eeprom_end+0xff7efd20>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	8d 87       	std	Y+13, r24	; 0x0d
     75e:	8d 85       	ldd	r24, Y+13	; 0x0d
     760:	88 a3       	std	Y+32, r24	; 0x20
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     762:	88 a1       	ldd	r24, Y+32	; 0x20
     764:	8a 95       	dec	r24
     766:	f1 f7       	brne	.-4      	; 0x764 <_ZN5Utils20delayTenMicrosecondsEj+0x216>
     768:	88 a3       	std	Y+32, r24	; 0x20
     76a:	10 cf       	rjmp	.-480    	; 0x58c <_ZN5Utils20delayTenMicrosecondsEj+0x3e>
                _delay_us(10);
            }
        }
        return;
     76c:	00 00       	nop
    }
     76e:	a2 96       	adiw	r28, 0x22	; 34
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <_ZN5Utils17delayMicrosecondsEj>:

    void delayMicroseconds(uint16_t value)
    {
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	00 d0       	rcall	.+0      	; 0x786 <_ZN5Utils17delayMicrosecondsEj+0x6>
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	9a 83       	std	Y+2, r25	; 0x02
     78c:	89 83       	std	Y+1, r24	; 0x01
        Utils::delayTenMicroseconds(value/10);
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	9c 01       	movw	r18, r24
     794:	ad ec       	ldi	r26, 0xCD	; 205
     796:	bc ec       	ldi	r27, 0xCC	; 204
     798:	e6 d9       	rcall	.-3124   	; 0xfffffb66 <__eeprom_end+0xff7efb66>
     79a:	96 95       	lsr	r25
     79c:	87 95       	ror	r24
     79e:	96 95       	lsr	r25
     7a0:	87 95       	ror	r24
     7a2:	96 95       	lsr	r25
     7a4:	87 95       	ror	r24
     7a6:	d3 de       	rcall	.-602    	; 0x54e <_ZN5Utils20delayTenMicrosecondsEj>
        return;
     7a8:	00 00       	nop
    }
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <_ZN5Utils17delayMillisecondsEj>:

    void delayMilliseconds(uint16_t value)
    {
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	60 97       	sbiw	r28, 0x10	; 16
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	98 8b       	std	Y+16, r25	; 0x10
     7ca:	8f 87       	std	Y+15, r24	; 0x0f
        while (value--) {
     7cc:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ce:	98 89       	ldd	r25, Y+16	; 0x10
     7d0:	9c 01       	movw	r18, r24
     7d2:	21 50       	subi	r18, 0x01	; 1
     7d4:	31 09       	sbc	r19, r1
     7d6:	38 8b       	std	Y+16, r19	; 0x10
     7d8:	2f 87       	std	Y+15, r18	; 0x0f
     7da:	21 e0       	ldi	r18, 0x01	; 1
     7dc:	89 2b       	or	r24, r25
     7de:	09 f4       	brne	.+2      	; 0x7e2 <_ZN5Utils17delayMillisecondsEj+0x2e>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	22 23       	and	r18, r18
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <_ZN5Utils17delayMillisecondsEj+0x34>
     7e6:	6d c0       	rjmp	.+218    	; 0x8c2 <_ZN5Utils17delayMillisecondsEj+0x10e>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	a0 e8       	ldi	r26, 0x80	; 128
     7ee:	bf e3       	ldi	r27, 0x3F	; 63
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	ab 83       	std	Y+3, r26	; 0x03
     7f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	4a ef       	ldi	r20, 0xFA	; 250
     7fe:	54 e4       	ldi	r21, 0x44	; 68
     800:	69 81       	ldd	r22, Y+1	; 0x01
     802:	7a 81       	ldd	r23, Y+2	; 0x02
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	30 db       	rcall	.-2464   	; 0xfffffe6a <__eeprom_end+0xff7efe6a>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	8d 83       	std	Y+5, r24	; 0x05
     810:	9e 83       	std	Y+6, r25	; 0x06
     812:	af 83       	std	Y+7, r26	; 0x07
     814:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	6d 81       	ldd	r22, Y+5	; 0x05
     820:	7e 81       	ldd	r23, Y+6	; 0x06
     822:	8f 81       	ldd	r24, Y+7	; 0x07
     824:	98 85       	ldd	r25, Y+8	; 0x08
     826:	10 da       	rcall	.-3040   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
     828:	88 23       	and	r24, r24
     82a:	2c f4       	brge	.+10     	; 0x836 <_ZN5Utils17delayMillisecondsEj+0x82>
		__ticks = 1;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	9a 87       	std	Y+10, r25	; 0x0a
     832:	89 87       	std	Y+9, r24	; 0x09
     834:	3b c0       	rjmp	.+118    	; 0x8ac <_ZN5Utils17delayMillisecondsEj+0xf8>
	else if (__tmp > 65535)
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	3f ef       	ldi	r19, 0xFF	; 255
     83a:	4f e7       	ldi	r20, 0x7F	; 127
     83c:	57 e4       	ldi	r21, 0x47	; 71
     83e:	6d 81       	ldd	r22, Y+5	; 0x05
     840:	7e 81       	ldd	r23, Y+6	; 0x06
     842:	8f 81       	ldd	r24, Y+7	; 0x07
     844:	98 85       	ldd	r25, Y+8	; 0x08
     846:	0d db       	rcall	.-2534   	; 0xfffffe62 <__eeprom_end+0xff7efe62>
     848:	18 16       	cp	r1, r24
     84a:	3c f5       	brge	.+78     	; 0x89a <_ZN5Utils17delayMillisecondsEj+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e2       	ldi	r20, 0x20	; 32
     852:	51 e4       	ldi	r21, 0x41	; 65
     854:	69 81       	ldd	r22, Y+1	; 0x01
     856:	7a 81       	ldd	r23, Y+2	; 0x02
     858:	8b 81       	ldd	r24, Y+3	; 0x03
     85a:	9c 81       	ldd	r25, Y+4	; 0x04
     85c:	06 db       	rcall	.-2548   	; 0xfffffe6a <__eeprom_end+0xff7efe6a>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	bc 01       	movw	r22, r24
     864:	cd 01       	movw	r24, r26
     866:	5c da       	rcall	.-2888   	; 0xfffffd20 <__eeprom_end+0xff7efd20>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	9a 87       	std	Y+10, r25	; 0x0a
     86e:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     870:	89 85       	ldd	r24, Y+9	; 0x09
     872:	9a 85       	ldd	r25, Y+10	; 0x0a
     874:	89 2b       	or	r24, r25
     876:	09 f4       	brne	.+2      	; 0x87a <_ZN5Utils17delayMillisecondsEj+0xc6>
     878:	a9 cf       	rjmp	.-174    	; 0x7cc <_ZN5Utils17delayMillisecondsEj+0x18>
     87a:	88 ec       	ldi	r24, 0xC8	; 200
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	9c 87       	std	Y+12, r25	; 0x0c
     880:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     882:	8b 85       	ldd	r24, Y+11	; 0x0b
     884:	9c 85       	ldd	r25, Y+12	; 0x0c
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <_ZN5Utils17delayMillisecondsEj+0xd2>
     88a:	9c 87       	std	Y+12, r25	; 0x0c
     88c:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     88e:	89 85       	ldd	r24, Y+9	; 0x09
     890:	9a 85       	ldd	r25, Y+10	; 0x0a
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	9a 87       	std	Y+10, r25	; 0x0a
     896:	89 87       	std	Y+9, r24	; 0x09
     898:	eb cf       	rjmp	.-42     	; 0x870 <_ZN5Utils17delayMillisecondsEj+0xbc>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     89a:	6d 81       	ldd	r22, Y+5	; 0x05
     89c:	7e 81       	ldd	r23, Y+6	; 0x06
     89e:	8f 81       	ldd	r24, Y+7	; 0x07
     8a0:	98 85       	ldd	r25, Y+8	; 0x08
     8a2:	3e da       	rcall	.-2948   	; 0xfffffd20 <__eeprom_end+0xff7efd20>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	9a 87       	std	Y+10, r25	; 0x0a
     8aa:	89 87       	std	Y+9, r24	; 0x09
     8ac:	89 85       	ldd	r24, Y+9	; 0x09
     8ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b0:	9e 87       	std	Y+14, r25	; 0x0e
     8b2:	8d 87       	std	Y+13, r24	; 0x0d
     8b4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8b6:	9e 85       	ldd	r25, Y+14	; 0x0e
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <_ZN5Utils17delayMillisecondsEj+0x104>
     8bc:	9e 87       	std	Y+14, r25	; 0x0e
     8be:	8d 87       	std	Y+13, r24	; 0x0d
     8c0:	85 cf       	rjmp	.-246    	; 0x7cc <_ZN5Utils17delayMillisecondsEj+0x18>
            // Delay function can't accept variables
            _delay_ms(1);
        }
        return;
     8c2:	00 00       	nop
    }
     8c4:	60 96       	adiw	r28, 0x10	; 16
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <_ZN8hardware13getKeyPressedEv>:
#ifndef PINS_H_
#error pins not defined (include *pins.h header in your HardwareConfig.h)
#endif

uint8_t hardware::getKeyPressed()
{
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
//    return   (IO::digitalRead(BUTTON_STOP_PIN) ? 0 : BUTTON_STOP)
//            | (IO::digitalRead(BUTTON_DEC_PIN)  ? 0 : BUTTON_DEC)
//            | (IO::digitalRead(BUTTON_INC_PIN)  ? 0 : BUTTON_INC)
//            | (IO::digitalRead(BUTTON_START_PIN)? 0 : BUTTON_START);
}
     8de:	00 00       	nop
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <_ZN8hardware14initializePinsEv>:


void hardware::initializePins()
{
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	e2 97       	sbiw	r28, 0x32	; 50
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
    setBuzzer(0);
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	19 d3       	rcall	.+1586   	; 0xf30 <_ZN8hardware9setBuzzerEh>
     8fe:	19 82       	std	Y+1, r1	; 0x01
                }
        }

        inline void analogReference(uint8_t mode)
        {
            if (mode == 0){
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	88 23       	and	r24, r24
     904:	49 f4       	brne	.+18     	; 0x918 <_ZN8hardware14initializePinsEv+0x32>
                // External reference - Clear bits 6 & 7
                ADMUX &= ~(0b11000000);
     906:	87 e2       	ldi	r24, 0x27	; 39
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	27 e2       	ldi	r18, 0x27	; 39
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	f9 01       	movw	r30, r18
     910:	20 81       	ld	r18, Z
     912:	2f 73       	andi	r18, 0x3F	; 63
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
     918:	8d e0       	ldi	r24, 0x0D	; 13
     91a:	8a 83       	std	Y+2, r24	; 0x02
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	8d a7       	std	Y+45, r24	; 0x2d
     920:	8a 81       	ldd	r24, Y+2	; 0x02
     922:	8e a7       	std	Y+46, r24	; 0x2e
        }

        // Pin number to data direction register
        inline volatile uint8_t* pinToDDR(uint8_t pinNumber)
        {
                switch (pinNumber)
     924:	8e a5       	ldd	r24, Y+46	; 0x2e
     926:	88 2f       	mov	r24, r24
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	09 2e       	mov	r0, r25
     92c:	00 0c       	add	r0, r0
     92e:	aa 0b       	sbc	r26, r26
     930:	bb 0b       	sbc	r27, r27
     932:	41 e0       	ldi	r20, 0x01	; 1
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	2f e1       	ldi	r18, 0x1F	; 31
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	84 1b       	sub	r24, r20
     93c:	95 0b       	sbc	r25, r21
     93e:	28 17       	cp	r18, r24
     940:	39 07       	cpc	r19, r25
     942:	70 f0       	brcs	.+28     	; 0x960 <_ZN8hardware14initializePinsEv+0x7a>
     944:	8d 5e       	subi	r24, 0xED	; 237
     946:	9f 4f       	sbci	r25, 0xFF	; 255
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	08 95       	ret
                        case 15:
                        case 16:
                        case 17:
                        case 7:
                        case 8:
                        return &DDRB;
     94e:	87 e3       	ldi	r24, 0x37	; 55
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	08 c0       	rjmp	.+16     	; 0x964 <_ZN8hardware14initializePinsEv+0x7e>
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        return &DDRC;
     954:	84 e3       	ldi	r24, 0x34	; 52
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	05 c0       	rjmp	.+10     	; 0x964 <_ZN8hardware14initializePinsEv+0x7e>
                        case 1:
                        case 2:
                        case 9:
                        case 10:
                        case 11:
                        return &DDRD;
     95a:	81 e3       	ldi	r24, 0x31	; 49
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <_ZN8hardware14initializePinsEv+0x7e>

                        default:
                        return 0;
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
                return (*port & bitmask);
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
     964:	98 ab       	std	Y+48, r25	; 0x30
     966:	8f a7       	std	Y+47, r24	; 0x2f
     968:	8a 81       	ldd	r24, Y+2	; 0x02
     96a:	89 ab       	std	Y+49, r24	; 0x31
        }

        // Pin number to bitmask mapping
        inline uint8_t pinBitmask(uint8_t pinNumber)
        {
                switch (pinNumber)
     96c:	89 a9       	ldd	r24, Y+49	; 0x31
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	09 2e       	mov	r0, r25
     974:	00 0c       	add	r0, r0
     976:	aa 0b       	sbc	r26, r26
     978:	bb 0b       	sbc	r27, r27
     97a:	41 e0       	ldi	r20, 0x01	; 1
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	2f e1       	ldi	r18, 0x1F	; 31
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	84 1b       	sub	r24, r20
     984:	95 0b       	sbc	r25, r21
     986:	28 17       	cp	r18, r24
     988:	39 07       	cpc	r19, r25
     98a:	a8 f0       	brcs	.+42     	; 0x9b6 <_ZN8hardware14initializePinsEv+0xd0>
     98c:	8d 5c       	subi	r24, 0xCD	; 205
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	8f 93       	push	r24
     992:	9f 93       	push	r25
     994:	08 95       	ret
                {
                        // Px0
                        case 12:
                        case 23:
                        case 30:
                        return 1<<0;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	0f c0       	rjmp	.+30     	; 0x9b8 <_ZN8hardware14initializePinsEv+0xd2>

                        // Px1
                        case 13:
                        case 24:
                        case 31:
                        return 1<<1;
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	0d c0       	rjmp	.+26     	; 0x9b8 <_ZN8hardware14initializePinsEv+0xd2>

                        // Px2
                        case 14:
                        case 25:
                        case 32:
                        return 1<<2;
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	0b c0       	rjmp	.+22     	; 0x9b8 <_ZN8hardware14initializePinsEv+0xd2>

                        // Px3
                        case 15:
                        case 26:
                        case 1:
                        return 1<<3;
     9a2:	88 e0       	ldi	r24, 0x08	; 8
     9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <_ZN8hardware14initializePinsEv+0xd2>

                        // Px4
                        case 16:
                        case 27:
                        case 2:
                        return 1<<4;
     9a6:	80 e1       	ldi	r24, 0x10	; 16
     9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <_ZN8hardware14initializePinsEv+0xd2>

                        // Px5
                        case 17:
                        case 28:
                        case 9:
                        return 1<<5;
     9aa:	80 e2       	ldi	r24, 0x20	; 32
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <_ZN8hardware14initializePinsEv+0xd2>

                        // Px6
                        case 7:
                        case 29:
                        case 10:
                        return 1<<6;
     9ae:	80 e4       	ldi	r24, 0x40	; 64
     9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <_ZN8hardware14initializePinsEv+0xd2>

                        // Px7
                        case 8:
                        case 11:
                        return 1<<7;
     9b2:	80 e8       	ldi	r24, 0x80	; 128
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <_ZN8hardware14initializePinsEv+0xd2>

                        default:
                        return 0;
     9b6:	80 e0       	ldi	r24, 0x00	; 0
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
                uint8_t bitmask = pinBitmask(pinNumber);
     9b8:	8a ab       	std	Y+50, r24	; 0x32

                if (mode) {
     9ba:	8d a5       	ldd	r24, Y+45	; 0x2d
     9bc:	88 23       	and	r24, r24
     9be:	61 f0       	breq	.+24     	; 0x9d8 <_ZN8hardware14initializePinsEv+0xf2>
                        // Mode is not 0, Set mode to output
                        *port |= bitmask;
     9c0:	8f a5       	ldd	r24, Y+47	; 0x2f
     9c2:	98 a9       	ldd	r25, Y+48	; 0x30
     9c4:	fc 01       	movw	r30, r24
     9c6:	90 81       	ld	r25, Z
     9c8:	8a a9       	ldd	r24, Y+50	; 0x32
     9ca:	29 2f       	mov	r18, r25
     9cc:	28 2b       	or	r18, r24
     9ce:	8f a5       	ldd	r24, Y+47	; 0x2f
     9d0:	98 a9       	ldd	r25, Y+48	; 0x30
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
     9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <_ZN8hardware14initializePinsEv+0x10c>
                } else {
                        // Set pin to input
                        *port &= ~bitmask;
     9d8:	8f a5       	ldd	r24, Y+47	; 0x2f
     9da:	98 a9       	ldd	r25, Y+48	; 0x30
     9dc:	fc 01       	movw	r30, r24
     9de:	80 81       	ld	r24, Z
     9e0:	98 2f       	mov	r25, r24
     9e2:	8a a9       	ldd	r24, Y+50	; 0x32
     9e4:	80 95       	com	r24
     9e6:	89 23       	and	r24, r25
     9e8:	28 2f       	mov	r18, r24
     9ea:	8f a5       	ldd	r24, Y+47	; 0x2f
     9ec:	98 a9       	ldd	r25, Y+48	; 0x30
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	8b 83       	std	Y+3, r24	; 0x03
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	8f a3       	std	Y+39, r24	; 0x27
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	88 a7       	std	Y+40, r24	; 0x28
        }

        // Pin number to data direction register
        inline volatile uint8_t* pinToDDR(uint8_t pinNumber)
        {
                switch (pinNumber)
     9fe:	88 a5       	ldd	r24, Y+40	; 0x28
     a00:	88 2f       	mov	r24, r24
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	09 2e       	mov	r0, r25
     a06:	00 0c       	add	r0, r0
     a08:	aa 0b       	sbc	r26, r26
     a0a:	bb 0b       	sbc	r27, r27
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	2f e1       	ldi	r18, 0x1F	; 31
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	84 1b       	sub	r24, r20
     a16:	95 0b       	sbc	r25, r21
     a18:	28 17       	cp	r18, r24
     a1a:	39 07       	cpc	r19, r25
     a1c:	70 f0       	brcs	.+28     	; 0xa3a <_ZN8hardware14initializePinsEv+0x154>
     a1e:	8d 5a       	subi	r24, 0xAD	; 173
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	08 95       	ret
                        case 15:
                        case 16:
                        case 17:
                        case 7:
                        case 8:
                        return &DDRB;
     a28:	87 e3       	ldi	r24, 0x37	; 55
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	08 c0       	rjmp	.+16     	; 0xa3e <_ZN8hardware14initializePinsEv+0x158>
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        return &DDRC;
     a2e:	84 e3       	ldi	r24, 0x34	; 52
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <_ZN8hardware14initializePinsEv+0x158>
                        case 1:
                        case 2:
                        case 9:
                        case 10:
                        case 11:
                        return &DDRD;
     a34:	81 e3       	ldi	r24, 0x31	; 49
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <_ZN8hardware14initializePinsEv+0x158>

                        default:
                        return 0;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
                return (*port & bitmask);
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
     a3e:	9a a7       	std	Y+42, r25	; 0x2a
     a40:	89 a7       	std	Y+41, r24	; 0x29
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	8b a7       	std	Y+43, r24	; 0x2b
        }

        // Pin number to bitmask mapping
        inline uint8_t pinBitmask(uint8_t pinNumber)
        {
                switch (pinNumber)
     a46:	8b a5       	ldd	r24, Y+43	; 0x2b
     a48:	88 2f       	mov	r24, r24
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	09 2e       	mov	r0, r25
     a4e:	00 0c       	add	r0, r0
     a50:	aa 0b       	sbc	r26, r26
     a52:	bb 0b       	sbc	r27, r27
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	2f e1       	ldi	r18, 0x1F	; 31
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	28 17       	cp	r18, r24
     a62:	39 07       	cpc	r19, r25
     a64:	a8 f0       	brcs	.+42     	; 0xa90 <_ZN8hardware14initializePinsEv+0x1aa>
     a66:	8d 58       	subi	r24, 0x8D	; 141
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	08 95       	ret
                {
                        // Px0
                        case 12:
                        case 23:
                        case 30:
                        return 1<<0;
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	0f c0       	rjmp	.+30     	; 0xa92 <_ZN8hardware14initializePinsEv+0x1ac>

                        // Px1
                        case 13:
                        case 24:
                        case 31:
                        return 1<<1;
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	0d c0       	rjmp	.+26     	; 0xa92 <_ZN8hardware14initializePinsEv+0x1ac>

                        // Px2
                        case 14:
                        case 25:
                        case 32:
                        return 1<<2;
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	0b c0       	rjmp	.+22     	; 0xa92 <_ZN8hardware14initializePinsEv+0x1ac>

                        // Px3
                        case 15:
                        case 26:
                        case 1:
                        return 1<<3;
     a7c:	88 e0       	ldi	r24, 0x08	; 8
     a7e:	09 c0       	rjmp	.+18     	; 0xa92 <_ZN8hardware14initializePinsEv+0x1ac>

                        // Px4
                        case 16:
                        case 27:
                        case 2:
                        return 1<<4;
     a80:	80 e1       	ldi	r24, 0x10	; 16
     a82:	07 c0       	rjmp	.+14     	; 0xa92 <_ZN8hardware14initializePinsEv+0x1ac>

                        // Px5
                        case 17:
                        case 28:
                        case 9:
                        return 1<<5;
     a84:	80 e2       	ldi	r24, 0x20	; 32
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <_ZN8hardware14initializePinsEv+0x1ac>

                        // Px6
                        case 7:
                        case 29:
                        case 10:
                        return 1<<6;
     a88:	80 e4       	ldi	r24, 0x40	; 64
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <_ZN8hardware14initializePinsEv+0x1ac>

                        // Px7
                        case 8:
                        case 11:
                        return 1<<7;
     a8c:	80 e8       	ldi	r24, 0x80	; 128
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <_ZN8hardware14initializePinsEv+0x1ac>

                        default:
                        return 0;
     a90:	80 e0       	ldi	r24, 0x00	; 0
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
                uint8_t bitmask = pinBitmask(pinNumber);
     a92:	8c a7       	std	Y+44, r24	; 0x2c

                if (mode) {
     a94:	8f a1       	ldd	r24, Y+39	; 0x27
     a96:	88 23       	and	r24, r24
     a98:	61 f0       	breq	.+24     	; 0xab2 <_ZN8hardware14initializePinsEv+0x1cc>
                        // Mode is not 0, Set mode to output
                        *port |= bitmask;
     a9a:	89 a5       	ldd	r24, Y+41	; 0x29
     a9c:	9a a5       	ldd	r25, Y+42	; 0x2a
     a9e:	fc 01       	movw	r30, r24
     aa0:	90 81       	ld	r25, Z
     aa2:	8c a5       	ldd	r24, Y+44	; 0x2c
     aa4:	29 2f       	mov	r18, r25
     aa6:	28 2b       	or	r18, r24
     aa8:	89 a5       	ldd	r24, Y+41	; 0x29
     aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
     ab0:	0d c0       	rjmp	.+26     	; 0xacc <_ZN8hardware14initializePinsEv+0x1e6>
                } else {
                        // Set pin to input
                        *port &= ~bitmask;
     ab2:	89 a5       	ldd	r24, Y+41	; 0x29
     ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ab6:	fc 01       	movw	r30, r24
     ab8:	80 81       	ld	r24, Z
     aba:	98 2f       	mov	r25, r24
     abc:	8c a5       	ldd	r24, Y+44	; 0x2c
     abe:	80 95       	com	r24
     ac0:	89 23       	and	r24, r25
     ac2:	28 2f       	mov	r18, r24
     ac4:	89 a5       	ldd	r24, Y+41	; 0x29
     ac6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
     acc:	8b e0       	ldi	r24, 0x0B	; 11
     ace:	8c 83       	std	Y+4, r24	; 0x04
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	89 a3       	std	Y+33, r24	; 0x21
     ad4:	8c 81       	ldd	r24, Y+4	; 0x04
     ad6:	8a a3       	std	Y+34, r24	; 0x22
        }

        // Pin number to data direction register
        inline volatile uint8_t* pinToDDR(uint8_t pinNumber)
        {
                switch (pinNumber)
     ad8:	8a a1       	ldd	r24, Y+34	; 0x22
     ada:	88 2f       	mov	r24, r24
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	09 2e       	mov	r0, r25
     ae0:	00 0c       	add	r0, r0
     ae2:	aa 0b       	sbc	r26, r26
     ae4:	bb 0b       	sbc	r27, r27
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	2f e1       	ldi	r18, 0x1F	; 31
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	84 1b       	sub	r24, r20
     af0:	95 0b       	sbc	r25, r21
     af2:	28 17       	cp	r18, r24
     af4:	39 07       	cpc	r19, r25
     af6:	70 f0       	brcs	.+28     	; 0xb14 <_ZN8hardware14initializePinsEv+0x22e>
     af8:	8d 56       	subi	r24, 0x6D	; 109
     afa:	9f 4f       	sbci	r25, 0xFF	; 255
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	08 95       	ret
                        case 15:
                        case 16:
                        case 17:
                        case 7:
                        case 8:
                        return &DDRB;
     b02:	87 e3       	ldi	r24, 0x37	; 55
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	08 c0       	rjmp	.+16     	; 0xb18 <_ZN8hardware14initializePinsEv+0x232>
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        return &DDRC;
     b08:	84 e3       	ldi	r24, 0x34	; 52
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	05 c0       	rjmp	.+10     	; 0xb18 <_ZN8hardware14initializePinsEv+0x232>
                        case 1:
                        case 2:
                        case 9:
                        case 10:
                        case 11:
                        return &DDRD;
     b0e:	81 e3       	ldi	r24, 0x31	; 49
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <_ZN8hardware14initializePinsEv+0x232>

                        default:
                        return 0;
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
                return (*port & bitmask);
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
     b18:	9c a3       	std	Y+36, r25	; 0x24
     b1a:	8b a3       	std	Y+35, r24	; 0x23
     b1c:	8c 81       	ldd	r24, Y+4	; 0x04
     b1e:	8d a3       	std	Y+37, r24	; 0x25
        }

        // Pin number to bitmask mapping
        inline uint8_t pinBitmask(uint8_t pinNumber)
        {
                switch (pinNumber)
     b20:	8d a1       	ldd	r24, Y+37	; 0x25
     b22:	88 2f       	mov	r24, r24
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	09 2e       	mov	r0, r25
     b28:	00 0c       	add	r0, r0
     b2a:	aa 0b       	sbc	r26, r26
     b2c:	bb 0b       	sbc	r27, r27
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	2f e1       	ldi	r18, 0x1F	; 31
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	84 1b       	sub	r24, r20
     b38:	95 0b       	sbc	r25, r21
     b3a:	28 17       	cp	r18, r24
     b3c:	39 07       	cpc	r19, r25
     b3e:	a8 f0       	brcs	.+42     	; 0xb6a <_ZN8hardware14initializePinsEv+0x284>
     b40:	8d 54       	subi	r24, 0x4D	; 77
     b42:	9f 4f       	sbci	r25, 0xFF	; 255
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	08 95       	ret
                {
                        // Px0
                        case 12:
                        case 23:
                        case 30:
                        return 1<<0;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0f c0       	rjmp	.+30     	; 0xb6c <_ZN8hardware14initializePinsEv+0x286>

                        // Px1
                        case 13:
                        case 24:
                        case 31:
                        return 1<<1;
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <_ZN8hardware14initializePinsEv+0x286>

                        // Px2
                        case 14:
                        case 25:
                        case 32:
                        return 1<<2;
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	0b c0       	rjmp	.+22     	; 0xb6c <_ZN8hardware14initializePinsEv+0x286>

                        // Px3
                        case 15:
                        case 26:
                        case 1:
                        return 1<<3;
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	09 c0       	rjmp	.+18     	; 0xb6c <_ZN8hardware14initializePinsEv+0x286>

                        // Px4
                        case 16:
                        case 27:
                        case 2:
                        return 1<<4;
     b5a:	80 e1       	ldi	r24, 0x10	; 16
     b5c:	07 c0       	rjmp	.+14     	; 0xb6c <_ZN8hardware14initializePinsEv+0x286>

                        // Px5
                        case 17:
                        case 28:
                        case 9:
                        return 1<<5;
     b5e:	80 e2       	ldi	r24, 0x20	; 32
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <_ZN8hardware14initializePinsEv+0x286>

                        // Px6
                        case 7:
                        case 29:
                        case 10:
                        return 1<<6;
     b62:	80 e4       	ldi	r24, 0x40	; 64
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <_ZN8hardware14initializePinsEv+0x286>

                        // Px7
                        case 8:
                        case 11:
                        return 1<<7;
     b66:	80 e8       	ldi	r24, 0x80	; 128
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <_ZN8hardware14initializePinsEv+0x286>

                        default:
                        return 0;
     b6a:	80 e0       	ldi	r24, 0x00	; 0
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
                uint8_t bitmask = pinBitmask(pinNumber);
     b6c:	8e a3       	std	Y+38, r24	; 0x26

                if (mode) {
     b6e:	89 a1       	ldd	r24, Y+33	; 0x21
     b70:	88 23       	and	r24, r24
     b72:	61 f0       	breq	.+24     	; 0xb8c <_ZN8hardware14initializePinsEv+0x2a6>
                        // Mode is not 0, Set mode to output
                        *port |= bitmask;
     b74:	8b a1       	ldd	r24, Y+35	; 0x23
     b76:	9c a1       	ldd	r25, Y+36	; 0x24
     b78:	fc 01       	movw	r30, r24
     b7a:	90 81       	ld	r25, Z
     b7c:	8e a1       	ldd	r24, Y+38	; 0x26
     b7e:	29 2f       	mov	r18, r25
     b80:	28 2b       	or	r18, r24
     b82:	8b a1       	ldd	r24, Y+35	; 0x23
     b84:	9c a1       	ldd	r25, Y+36	; 0x24
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
     b8a:	0d c0       	rjmp	.+26     	; 0xba6 <_ZN8hardware14initializePinsEv+0x2c0>
                } else {
                        // Set pin to input
                        *port &= ~bitmask;
     b8c:	8b a1       	ldd	r24, Y+35	; 0x23
     b8e:	9c a1       	ldd	r25, Y+36	; 0x24
     b90:	fc 01       	movw	r30, r24
     b92:	80 81       	ld	r24, Z
     b94:	98 2f       	mov	r25, r24
     b96:	8e a1       	ldd	r24, Y+38	; 0x26
     b98:	80 95       	com	r24
     b9a:	89 23       	and	r24, r25
     b9c:	28 2f       	mov	r18, r24
     b9e:	8b a1       	ldd	r24, Y+35	; 0x23
     ba0:	9c a1       	ldd	r25, Y+36	; 0x24
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
     ba6:	8e e1       	ldi	r24, 0x1E	; 30
     ba8:	8d 83       	std	Y+5, r24	; 0x05
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8b 8f       	std	Y+27, r24	; 0x1b
     bae:	8d 81       	ldd	r24, Y+5	; 0x05
     bb0:	8c 8f       	std	Y+28, r24	; 0x1c
        }

        // Pin number to data direction register
        inline volatile uint8_t* pinToDDR(uint8_t pinNumber)
        {
                switch (pinNumber)
     bb2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bb4:	88 2f       	mov	r24, r24
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	09 2e       	mov	r0, r25
     bba:	00 0c       	add	r0, r0
     bbc:	aa 0b       	sbc	r26, r26
     bbe:	bb 0b       	sbc	r27, r27
     bc0:	41 e0       	ldi	r20, 0x01	; 1
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	2f e1       	ldi	r18, 0x1F	; 31
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	84 1b       	sub	r24, r20
     bca:	95 0b       	sbc	r25, r21
     bcc:	28 17       	cp	r18, r24
     bce:	39 07       	cpc	r19, r25
     bd0:	70 f0       	brcs	.+28     	; 0xbee <_ZN8hardware14initializePinsEv+0x308>
     bd2:	8d 52       	subi	r24, 0x2D	; 45
     bd4:	9f 4f       	sbci	r25, 0xFF	; 255
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	08 95       	ret
                        case 15:
                        case 16:
                        case 17:
                        case 7:
                        case 8:
                        return &DDRB;
     bdc:	87 e3       	ldi	r24, 0x37	; 55
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	08 c0       	rjmp	.+16     	; 0xbf2 <_ZN8hardware14initializePinsEv+0x30c>
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        return &DDRC;
     be2:	84 e3       	ldi	r24, 0x34	; 52
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <_ZN8hardware14initializePinsEv+0x30c>
                        case 1:
                        case 2:
                        case 9:
                        case 10:
                        case 11:
                        return &DDRD;
     be8:	81 e3       	ldi	r24, 0x31	; 49
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <_ZN8hardware14initializePinsEv+0x30c>

                        default:
                        return 0;
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
                return (*port & bitmask);
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
     bf2:	9e 8f       	std	Y+30, r25	; 0x1e
     bf4:	8d 8f       	std	Y+29, r24	; 0x1d
     bf6:	8d 81       	ldd	r24, Y+5	; 0x05
     bf8:	8f 8f       	std	Y+31, r24	; 0x1f
        }

        // Pin number to bitmask mapping
        inline uint8_t pinBitmask(uint8_t pinNumber)
        {
                switch (pinNumber)
     bfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	09 2e       	mov	r0, r25
     c02:	00 0c       	add	r0, r0
     c04:	aa 0b       	sbc	r26, r26
     c06:	bb 0b       	sbc	r27, r27
     c08:	41 e0       	ldi	r20, 0x01	; 1
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	2f e1       	ldi	r18, 0x1F	; 31
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	84 1b       	sub	r24, r20
     c12:	95 0b       	sbc	r25, r21
     c14:	28 17       	cp	r18, r24
     c16:	39 07       	cpc	r19, r25
     c18:	a8 f0       	brcs	.+42     	; 0xc44 <_ZN8hardware14initializePinsEv+0x35e>
     c1a:	8d 50       	subi	r24, 0x0D	; 13
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
     c22:	08 95       	ret
                {
                        // Px0
                        case 12:
                        case 23:
                        case 30:
                        return 1<<0;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	0f c0       	rjmp	.+30     	; 0xc46 <_ZN8hardware14initializePinsEv+0x360>

                        // Px1
                        case 13:
                        case 24:
                        case 31:
                        return 1<<1;
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	0d c0       	rjmp	.+26     	; 0xc46 <_ZN8hardware14initializePinsEv+0x360>

                        // Px2
                        case 14:
                        case 25:
                        case 32:
                        return 1<<2;
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <_ZN8hardware14initializePinsEv+0x360>

                        // Px3
                        case 15:
                        case 26:
                        case 1:
                        return 1<<3;
     c30:	88 e0       	ldi	r24, 0x08	; 8
     c32:	09 c0       	rjmp	.+18     	; 0xc46 <_ZN8hardware14initializePinsEv+0x360>

                        // Px4
                        case 16:
                        case 27:
                        case 2:
                        return 1<<4;
     c34:	80 e1       	ldi	r24, 0x10	; 16
     c36:	07 c0       	rjmp	.+14     	; 0xc46 <_ZN8hardware14initializePinsEv+0x360>

                        // Px5
                        case 17:
                        case 28:
                        case 9:
                        return 1<<5;
     c38:	80 e2       	ldi	r24, 0x20	; 32
     c3a:	05 c0       	rjmp	.+10     	; 0xc46 <_ZN8hardware14initializePinsEv+0x360>

                        // Px6
                        case 7:
                        case 29:
                        case 10:
                        return 1<<6;
     c3c:	80 e4       	ldi	r24, 0x40	; 64
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <_ZN8hardware14initializePinsEv+0x360>

                        // Px7
                        case 8:
                        case 11:
                        return 1<<7;
     c40:	80 e8       	ldi	r24, 0x80	; 128
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <_ZN8hardware14initializePinsEv+0x360>

                        default:
                        return 0;
     c44:	80 e0       	ldi	r24, 0x00	; 0
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
                uint8_t bitmask = pinBitmask(pinNumber);
     c46:	88 a3       	std	Y+32, r24	; 0x20

                if (mode) {
     c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c4a:	88 23       	and	r24, r24
     c4c:	61 f0       	breq	.+24     	; 0xc66 <_ZN8hardware14initializePinsEv+0x380>
                        // Mode is not 0, Set mode to output
                        *port |= bitmask;
     c4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c50:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c52:	fc 01       	movw	r30, r24
     c54:	90 81       	ld	r25, Z
     c56:	88 a1       	ldd	r24, Y+32	; 0x20
     c58:	29 2f       	mov	r18, r25
     c5a:	28 2b       	or	r18, r24
     c5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
     c64:	0d c0       	rjmp	.+26     	; 0xc80 <_ZN8hardware14initializePinsEv+0x39a>
                } else {
                        // Set pin to input
                        *port &= ~bitmask;
     c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c68:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	98 2f       	mov	r25, r24
     c70:	88 a1       	ldd	r24, Y+32	; 0x20
     c72:	80 95       	com	r24
     c74:	89 23       	and	r24, r25
     c76:	28 2f       	mov	r18, r24
     c78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18
     c80:	8f e1       	ldi	r24, 0x1F	; 31
     c82:	8e 83       	std	Y+6, r24	; 0x06
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8d 8b       	std	Y+21, r24	; 0x15
     c88:	8e 81       	ldd	r24, Y+6	; 0x06
     c8a:	8e 8b       	std	Y+22, r24	; 0x16
        }

        // Pin number to data direction register
        inline volatile uint8_t* pinToDDR(uint8_t pinNumber)
        {
                switch (pinNumber)
     c8c:	8e 89       	ldd	r24, Y+22	; 0x16
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	09 2e       	mov	r0, r25
     c94:	00 0c       	add	r0, r0
     c96:	aa 0b       	sbc	r26, r26
     c98:	bb 0b       	sbc	r27, r27
     c9a:	41 e0       	ldi	r20, 0x01	; 1
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	2f e1       	ldi	r18, 0x1F	; 31
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	84 1b       	sub	r24, r20
     ca4:	95 0b       	sbc	r25, r21
     ca6:	28 17       	cp	r18, r24
     ca8:	39 07       	cpc	r19, r25
     caa:	70 f0       	brcs	.+28     	; 0xcc8 <_ZN8hardware14initializePinsEv+0x3e2>
     cac:	8d 5e       	subi	r24, 0xED	; 237
     cae:	9e 4f       	sbci	r25, 0xFE	; 254
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	08 95       	ret
                        case 15:
                        case 16:
                        case 17:
                        case 7:
                        case 8:
                        return &DDRB;
     cb6:	87 e3       	ldi	r24, 0x37	; 55
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	08 c0       	rjmp	.+16     	; 0xccc <_ZN8hardware14initializePinsEv+0x3e6>
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        return &DDRC;
     cbc:	84 e3       	ldi	r24, 0x34	; 52
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	05 c0       	rjmp	.+10     	; 0xccc <_ZN8hardware14initializePinsEv+0x3e6>
                        case 1:
                        case 2:
                        case 9:
                        case 10:
                        case 11:
                        return &DDRD;
     cc2:	81 e3       	ldi	r24, 0x31	; 49
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <_ZN8hardware14initializePinsEv+0x3e6>

                        default:
                        return 0;
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
                return (*port & bitmask);
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
     ccc:	98 8f       	std	Y+24, r25	; 0x18
     cce:	8f 8b       	std	Y+23, r24	; 0x17
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	89 8f       	std	Y+25, r24	; 0x19
        }

        // Pin number to bitmask mapping
        inline uint8_t pinBitmask(uint8_t pinNumber)
        {
                switch (pinNumber)
     cd4:	89 8d       	ldd	r24, Y+25	; 0x19
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	09 2e       	mov	r0, r25
     cdc:	00 0c       	add	r0, r0
     cde:	aa 0b       	sbc	r26, r26
     ce0:	bb 0b       	sbc	r27, r27
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	2f e1       	ldi	r18, 0x1F	; 31
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	84 1b       	sub	r24, r20
     cec:	95 0b       	sbc	r25, r21
     cee:	28 17       	cp	r18, r24
     cf0:	39 07       	cpc	r19, r25
     cf2:	a8 f0       	brcs	.+42     	; 0xd1e <_ZN8hardware14initializePinsEv+0x438>
     cf4:	8d 5c       	subi	r24, 0xCD	; 205
     cf6:	9e 4f       	sbci	r25, 0xFE	; 254
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	08 95       	ret
                {
                        // Px0
                        case 12:
                        case 23:
                        case 30:
                        return 1<<0;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <_ZN8hardware14initializePinsEv+0x43a>

                        // Px1
                        case 13:
                        case 24:
                        case 31:
                        return 1<<1;
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	0d c0       	rjmp	.+26     	; 0xd20 <_ZN8hardware14initializePinsEv+0x43a>

                        // Px2
                        case 14:
                        case 25:
                        case 32:
                        return 1<<2;
     d06:	84 e0       	ldi	r24, 0x04	; 4
     d08:	0b c0       	rjmp	.+22     	; 0xd20 <_ZN8hardware14initializePinsEv+0x43a>

                        // Px3
                        case 15:
                        case 26:
                        case 1:
                        return 1<<3;
     d0a:	88 e0       	ldi	r24, 0x08	; 8
     d0c:	09 c0       	rjmp	.+18     	; 0xd20 <_ZN8hardware14initializePinsEv+0x43a>

                        // Px4
                        case 16:
                        case 27:
                        case 2:
                        return 1<<4;
     d0e:	80 e1       	ldi	r24, 0x10	; 16
     d10:	07 c0       	rjmp	.+14     	; 0xd20 <_ZN8hardware14initializePinsEv+0x43a>

                        // Px5
                        case 17:
                        case 28:
                        case 9:
                        return 1<<5;
     d12:	80 e2       	ldi	r24, 0x20	; 32
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <_ZN8hardware14initializePinsEv+0x43a>

                        // Px6
                        case 7:
                        case 29:
                        case 10:
                        return 1<<6;
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <_ZN8hardware14initializePinsEv+0x43a>

                        // Px7
                        case 8:
                        case 11:
                        return 1<<7;
     d1a:	80 e8       	ldi	r24, 0x80	; 128
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <_ZN8hardware14initializePinsEv+0x43a>

                        default:
                        return 0;
     d1e:	80 e0       	ldi	r24, 0x00	; 0
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
                uint8_t bitmask = pinBitmask(pinNumber);
     d20:	8a 8f       	std	Y+26, r24	; 0x1a

                if (mode) {
     d22:	8d 89       	ldd	r24, Y+21	; 0x15
     d24:	88 23       	and	r24, r24
     d26:	61 f0       	breq	.+24     	; 0xd40 <_ZN8hardware14initializePinsEv+0x45a>
                        // Mode is not 0, Set mode to output
                        *port |= bitmask;
     d28:	8f 89       	ldd	r24, Y+23	; 0x17
     d2a:	98 8d       	ldd	r25, Y+24	; 0x18
     d2c:	fc 01       	movw	r30, r24
     d2e:	90 81       	ld	r25, Z
     d30:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d32:	29 2f       	mov	r18, r25
     d34:	28 2b       	or	r18, r24
     d36:	8f 89       	ldd	r24, Y+23	; 0x17
     d38:	98 8d       	ldd	r25, Y+24	; 0x18
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 83       	st	Z, r18
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <_ZN8hardware14initializePinsEv+0x474>
                } else {
                        // Set pin to input
                        *port &= ~bitmask;
     d40:	8f 89       	ldd	r24, Y+23	; 0x17
     d42:	98 8d       	ldd	r25, Y+24	; 0x18
     d44:	fc 01       	movw	r30, r24
     d46:	80 81       	ld	r24, Z
     d48:	98 2f       	mov	r25, r24
     d4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d4c:	80 95       	com	r24
     d4e:	89 23       	and	r24, r25
     d50:	28 2f       	mov	r18, r24
     d52:	8f 89       	ldd	r24, Y+23	; 0x17
     d54:	98 8d       	ldd	r25, Y+24	; 0x18
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
     d5a:	80 e2       	ldi	r24, 0x20	; 32
     d5c:	8f 83       	std	Y+7, r24	; 0x07
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8f 87       	std	Y+15, r24	; 0x0f
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	88 8b       	std	Y+16, r24	; 0x10
        }

        // Pin number to data direction register
        inline volatile uint8_t* pinToDDR(uint8_t pinNumber)
        {
                switch (pinNumber)
     d66:	88 89       	ldd	r24, Y+16	; 0x10
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	09 2e       	mov	r0, r25
     d6e:	00 0c       	add	r0, r0
     d70:	aa 0b       	sbc	r26, r26
     d72:	bb 0b       	sbc	r27, r27
     d74:	41 e0       	ldi	r20, 0x01	; 1
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	2f e1       	ldi	r18, 0x1F	; 31
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	84 1b       	sub	r24, r20
     d7e:	95 0b       	sbc	r25, r21
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	70 f0       	brcs	.+28     	; 0xda2 <_ZN8hardware14initializePinsEv+0x4bc>
     d86:	8d 5a       	subi	r24, 0xAD	; 173
     d88:	9e 4f       	sbci	r25, 0xFE	; 254
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	08 95       	ret
                        case 15:
                        case 16:
                        case 17:
                        case 7:
                        case 8:
                        return &DDRB;
     d90:	87 e3       	ldi	r24, 0x37	; 55
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <_ZN8hardware14initializePinsEv+0x4c0>
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        return &DDRC;
     d96:	84 e3       	ldi	r24, 0x34	; 52
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <_ZN8hardware14initializePinsEv+0x4c0>
                        case 1:
                        case 2:
                        case 9:
                        case 10:
                        case 11:
                        return &DDRD;
     d9c:	81 e3       	ldi	r24, 0x31	; 49
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <_ZN8hardware14initializePinsEv+0x4c0>

                        default:
                        return 0;
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
                return (*port & bitmask);
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
     da6:	9a 8b       	std	Y+18, r25	; 0x12
     da8:	89 8b       	std	Y+17, r24	; 0x11
     daa:	8f 81       	ldd	r24, Y+7	; 0x07
     dac:	8b 8b       	std	Y+19, r24	; 0x13
        }

        // Pin number to bitmask mapping
        inline uint8_t pinBitmask(uint8_t pinNumber)
        {
                switch (pinNumber)
     dae:	8b 89       	ldd	r24, Y+19	; 0x13
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	09 2e       	mov	r0, r25
     db6:	00 0c       	add	r0, r0
     db8:	aa 0b       	sbc	r26, r26
     dba:	bb 0b       	sbc	r27, r27
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	2f e1       	ldi	r18, 0x1F	; 31
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	84 1b       	sub	r24, r20
     dc6:	95 0b       	sbc	r25, r21
     dc8:	28 17       	cp	r18, r24
     dca:	39 07       	cpc	r19, r25
     dcc:	a8 f0       	brcs	.+42     	; 0xdf8 <_ZN8hardware14initializePinsEv+0x512>
     dce:	8d 58       	subi	r24, 0x8D	; 141
     dd0:	9e 4f       	sbci	r25, 0xFE	; 254
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	08 95       	ret
                {
                        // Px0
                        case 12:
                        case 23:
                        case 30:
                        return 1<<0;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <_ZN8hardware14initializePinsEv+0x514>

                        // Px1
                        case 13:
                        case 24:
                        case 31:
                        return 1<<1;
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <_ZN8hardware14initializePinsEv+0x514>

                        // Px2
                        case 14:
                        case 25:
                        case 32:
                        return 1<<2;
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	0b c0       	rjmp	.+22     	; 0xdfa <_ZN8hardware14initializePinsEv+0x514>

                        // Px3
                        case 15:
                        case 26:
                        case 1:
                        return 1<<3;
     de4:	88 e0       	ldi	r24, 0x08	; 8
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <_ZN8hardware14initializePinsEv+0x514>

                        // Px4
                        case 16:
                        case 27:
                        case 2:
                        return 1<<4;
     de8:	80 e1       	ldi	r24, 0x10	; 16
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <_ZN8hardware14initializePinsEv+0x514>

                        // Px5
                        case 17:
                        case 28:
                        case 9:
                        return 1<<5;
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <_ZN8hardware14initializePinsEv+0x514>

                        // Px6
                        case 7:
                        case 29:
                        case 10:
                        return 1<<6;
     df0:	80 e4       	ldi	r24, 0x40	; 64
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <_ZN8hardware14initializePinsEv+0x514>

                        // Px7
                        case 8:
                        case 11:
                        return 1<<7;
     df4:	80 e8       	ldi	r24, 0x80	; 128
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <_ZN8hardware14initializePinsEv+0x514>

                        default:
                        return 0;
     df8:	80 e0       	ldi	r24, 0x00	; 0
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
                uint8_t bitmask = pinBitmask(pinNumber);
     dfa:	8c 8b       	std	Y+20, r24	; 0x14

                if (mode) {
     dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfe:	88 23       	and	r24, r24
     e00:	61 f0       	breq	.+24     	; 0xe1a <_ZN8hardware14initializePinsEv+0x534>
                        // Mode is not 0, Set mode to output
                        *port |= bitmask;
     e02:	89 89       	ldd	r24, Y+17	; 0x11
     e04:	9a 89       	ldd	r25, Y+18	; 0x12
     e06:	fc 01       	movw	r30, r24
     e08:	90 81       	ld	r25, Z
     e0a:	8c 89       	ldd	r24, Y+20	; 0x14
     e0c:	29 2f       	mov	r18, r25
     e0e:	28 2b       	or	r18, r24
     e10:	89 89       	ldd	r24, Y+17	; 0x11
     e12:	9a 89       	ldd	r25, Y+18	; 0x12
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <_ZN8hardware14initializePinsEv+0x54e>
                } else {
                        // Set pin to input
                        *port &= ~bitmask;
     e1a:	89 89       	ldd	r24, Y+17	; 0x11
     e1c:	9a 89       	ldd	r25, Y+18	; 0x12
     e1e:	fc 01       	movw	r30, r24
     e20:	80 81       	ld	r24, Z
     e22:	98 2f       	mov	r25, r24
     e24:	8c 89       	ldd	r24, Y+20	; 0x14
     e26:	80 95       	com	r24
     e28:	89 23       	and	r24, r25
     e2a:	28 2f       	mov	r18, r24
     e2c:	89 89       	ldd	r24, Y+17	; 0x11
     e2e:	9a 89       	ldd	r25, Y+18	; 0x12
     e30:	fc 01       	movw	r30, r24
     e32:	20 83       	st	Z, r18
     e34:	89 e0       	ldi	r24, 0x09	; 9
     e36:	88 87       	std	Y+8, r24	; 0x08
     e38:	19 86       	std	Y+9, r1	; 0x09
     e3a:	88 85       	ldd	r24, Y+8	; 0x08
     e3c:	8a 87       	std	Y+10, r24	; 0x0a
        }

        // Pin number to data direction register
        inline volatile uint8_t* pinToDDR(uint8_t pinNumber)
        {
                switch (pinNumber)
     e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	09 2e       	mov	r0, r25
     e46:	00 0c       	add	r0, r0
     e48:	aa 0b       	sbc	r26, r26
     e4a:	bb 0b       	sbc	r27, r27
     e4c:	41 e0       	ldi	r20, 0x01	; 1
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	2f e1       	ldi	r18, 0x1F	; 31
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	84 1b       	sub	r24, r20
     e56:	95 0b       	sbc	r25, r21
     e58:	28 17       	cp	r18, r24
     e5a:	39 07       	cpc	r19, r25
     e5c:	70 f0       	brcs	.+28     	; 0xe7a <_ZN8hardware14initializePinsEv+0x594>
     e5e:	8d 56       	subi	r24, 0x6D	; 109
     e60:	9e 4f       	sbci	r25, 0xFE	; 254
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	08 95       	ret
                        case 15:
                        case 16:
                        case 17:
                        case 7:
                        case 8:
                        return &DDRB;
     e68:	87 e3       	ldi	r24, 0x37	; 55
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	08 c0       	rjmp	.+16     	; 0xe7e <_ZN8hardware14initializePinsEv+0x598>
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        return &DDRC;
     e6e:	84 e3       	ldi	r24, 0x34	; 52
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <_ZN8hardware14initializePinsEv+0x598>
                        case 1:
                        case 2:
                        case 9:
                        case 10:
                        case 11:
                        return &DDRD;
     e74:	81 e3       	ldi	r24, 0x31	; 49
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <_ZN8hardware14initializePinsEv+0x598>

                        default:
                        return 0;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
                return (*port & bitmask);
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
     e7e:	9c 87       	std	Y+12, r25	; 0x0c
     e80:	8b 87       	std	Y+11, r24	; 0x0b
     e82:	88 85       	ldd	r24, Y+8	; 0x08
     e84:	8d 87       	std	Y+13, r24	; 0x0d
        }

        // Pin number to bitmask mapping
        inline uint8_t pinBitmask(uint8_t pinNumber)
        {
                switch (pinNumber)
     e86:	8d 85       	ldd	r24, Y+13	; 0x0d
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	09 2e       	mov	r0, r25
     e8e:	00 0c       	add	r0, r0
     e90:	aa 0b       	sbc	r26, r26
     e92:	bb 0b       	sbc	r27, r27
     e94:	41 e0       	ldi	r20, 0x01	; 1
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	2f e1       	ldi	r18, 0x1F	; 31
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	84 1b       	sub	r24, r20
     e9e:	95 0b       	sbc	r25, r21
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	a8 f0       	brcs	.+42     	; 0xed0 <_ZN8hardware14initializePinsEv+0x5ea>
     ea6:	8d 54       	subi	r24, 0x4D	; 77
     ea8:	9e 4f       	sbci	r25, 0xFE	; 254
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	08 95       	ret
                {
                        // Px0
                        case 12:
                        case 23:
                        case 30:
                        return 1<<0;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0f c0       	rjmp	.+30     	; 0xed2 <_ZN8hardware14initializePinsEv+0x5ec>

                        // Px1
                        case 13:
                        case 24:
                        case 31:
                        return 1<<1;
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	0d c0       	rjmp	.+26     	; 0xed2 <_ZN8hardware14initializePinsEv+0x5ec>

                        // Px2
                        case 14:
                        case 25:
                        case 32:
                        return 1<<2;
     eb8:	84 e0       	ldi	r24, 0x04	; 4
     eba:	0b c0       	rjmp	.+22     	; 0xed2 <_ZN8hardware14initializePinsEv+0x5ec>

                        // Px3
                        case 15:
                        case 26:
                        case 1:
                        return 1<<3;
     ebc:	88 e0       	ldi	r24, 0x08	; 8
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <_ZN8hardware14initializePinsEv+0x5ec>

                        // Px4
                        case 16:
                        case 27:
                        case 2:
                        return 1<<4;
     ec0:	80 e1       	ldi	r24, 0x10	; 16
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <_ZN8hardware14initializePinsEv+0x5ec>

                        // Px5
                        case 17:
                        case 28:
                        case 9:
                        return 1<<5;
     ec4:	80 e2       	ldi	r24, 0x20	; 32
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <_ZN8hardware14initializePinsEv+0x5ec>

                        // Px6
                        case 7:
                        case 29:
                        case 10:
                        return 1<<6;
     ec8:	80 e4       	ldi	r24, 0x40	; 64
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <_ZN8hardware14initializePinsEv+0x5ec>

                        // Px7
                        case 8:
                        case 11:
                        return 1<<7;
     ecc:	80 e8       	ldi	r24, 0x80	; 128
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <_ZN8hardware14initializePinsEv+0x5ec>

                        default:
                        return 0;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
        }

        inline void pinMode(uint8_t pinNumber, uint8_t mode)
        {
                volatile uint8_t *port = pinToDDR(pinNumber);
                uint8_t bitmask = pinBitmask(pinNumber);
     ed2:	8e 87       	std	Y+14, r24	; 0x0e

                if (mode) {
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	88 23       	and	r24, r24
     ed8:	61 f0       	breq	.+24     	; 0xef2 <_ZN8hardware14initializePinsEv+0x60c>
                        // Mode is not 0, Set mode to output
                        *port |= bitmask;
     eda:	8b 85       	ldd	r24, Y+11	; 0x0b
     edc:	9c 85       	ldd	r25, Y+12	; 0x0c
     ede:	fc 01       	movw	r30, r24
     ee0:	90 81       	ld	r25, Z
     ee2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ee4:	29 2f       	mov	r18, r25
     ee6:	28 2b       	or	r18, r24
     ee8:	8b 85       	ldd	r24, Y+11	; 0x0b
     eea:	9c 85       	ldd	r25, Y+12	; 0x0c
     eec:	fc 01       	movw	r30, r24
     eee:	20 83       	st	Z, r18
    IO::pinMode(LAMP_PIN, OUTPUT);
    IO::pinMode(FAN_PIN, OUTPUT);
    IO::pinMode(HEATER_PIN, OUTPUT);

    IO::pinMode(DOOR_PIN, INPUT);
}
     ef0:	0d c0       	rjmp	.+26     	; 0xf0c <_ZN8hardware14initializePinsEv+0x626>
                } else {
                        // Set pin to input
                        *port &= ~bitmask;
     ef2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef6:	fc 01       	movw	r30, r24
     ef8:	80 81       	ld	r24, Z
     efa:	98 2f       	mov	r25, r24
     efc:	8e 85       	ldd	r24, Y+14	; 0x0e
     efe:	80 95       	com	r24
     f00:	89 23       	and	r24, r25
     f02:	28 2f       	mov	r18, r24
     f04:	8b 85       	ldd	r24, Y+11	; 0x0b
     f06:	9c 85       	ldd	r25, Y+12	; 0x0c
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18
     f0c:	00 00       	nop
     f0e:	e2 96       	adiw	r28, 0x32	; 50
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <_ZN8hardware10initializeEv>:

void hardware::initialize()
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
//    AnalogInputsADC::initialize();
}
     f28:	00 00       	nop
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <_ZN8hardware9setBuzzerEh>:

void hardware::setBuzzer(uint8_t val)
{
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	28 97       	sbiw	r28, 0x08	; 8
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	88 87       	std	Y+8, r24	; 0x08
    IO::digitalWrite(BUZZER_PIN, (val&1));
     f46:	88 85       	ldd	r24, Y+8	; 0x08
     f48:	81 70       	andi	r24, 0x01	; 1
     f4a:	9d e0       	ldi	r25, 0x0D	; 13
     f4c:	99 83       	std	Y+1, r25	; 0x01
     f4e:	8a 83       	std	Y+2, r24	; 0x02
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	8b 83       	std	Y+3, r24	; 0x03

        // Convert physical pin number to logical port address
        inline volatile uint8_t* pinToPort(uint8_t pinNumber)
        {
                // Better way to do this?
                switch (pinNumber)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	09 2e       	mov	r0, r25
     f5c:	00 0c       	add	r0, r0
     f5e:	aa 0b       	sbc	r26, r26
     f60:	bb 0b       	sbc	r27, r27
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	2f e1       	ldi	r18, 0x1F	; 31
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	84 1b       	sub	r24, r20
     f6c:	95 0b       	sbc	r25, r21
     f6e:	28 17       	cp	r18, r24
     f70:	39 07       	cpc	r19, r25
     f72:	70 f0       	brcs	.+28     	; 0xf90 <_ZN8hardware9setBuzzerEh+0x60>
     f74:	8d 52       	subi	r24, 0x2D	; 45
     f76:	9e 4f       	sbci	r25, 0xFE	; 254
     f78:	8f 93       	push	r24
     f7a:	9f 93       	push	r25
     f7c:	08 95       	ret
                        case 15:
                        case 16:
                        case 17:
                        case 7:
                        case 8:
                        return &PORTB;
     f7e:	88 e3       	ldi	r24, 0x38	; 56
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <_ZN8hardware9setBuzzerEh+0x64>
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        return &PORTC;
     f84:	85 e3       	ldi	r24, 0x35	; 53
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <_ZN8hardware9setBuzzerEh+0x64>
                        case 1:
                        case 2:
                        case 9:
                        case 10:
                        case 11:
                        return &PORTD;
     f8a:	82 e3       	ldi	r24, 0x32	; 50
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <_ZN8hardware9setBuzzerEh+0x64>

                        default:
                        return 0;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
        inline volatile uint8_t* pinToDDR(uint8_t pinNumber) INLINE_ATTR;

        inline void digitalWrite(uint8_t pinNumber, uint8_t value)
        {
                // Grab the port and proper bitmask for the pin
                volatile uint8_t *port = pinToPort(pinNumber);
     f94:	9d 83       	std	Y+5, r25	; 0x05
     f96:	8c 83       	std	Y+4, r24	; 0x04
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	8e 83       	std	Y+6, r24	; 0x06
        }

        // Pin number to bitmask mapping
        inline uint8_t pinBitmask(uint8_t pinNumber)
        {
                switch (pinNumber)
     f9c:	8e 81       	ldd	r24, Y+6	; 0x06
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	09 2e       	mov	r0, r25
     fa4:	00 0c       	add	r0, r0
     fa6:	aa 0b       	sbc	r26, r26
     fa8:	bb 0b       	sbc	r27, r27
     faa:	41 e0       	ldi	r20, 0x01	; 1
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	2f e1       	ldi	r18, 0x1F	; 31
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	84 1b       	sub	r24, r20
     fb4:	95 0b       	sbc	r25, r21
     fb6:	28 17       	cp	r18, r24
     fb8:	39 07       	cpc	r19, r25
     fba:	a8 f0       	brcs	.+42     	; 0xfe6 <_ZN8hardware9setBuzzerEh+0xb6>
     fbc:	8d 50       	subi	r24, 0x0D	; 13
     fbe:	9e 4f       	sbci	r25, 0xFE	; 254
     fc0:	8f 93       	push	r24
     fc2:	9f 93       	push	r25
     fc4:	08 95       	ret
                {
                        // Px0
                        case 12:
                        case 23:
                        case 30:
                        return 1<<0;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <_ZN8hardware9setBuzzerEh+0xb8>

                        // Px1
                        case 13:
                        case 24:
                        case 31:
                        return 1<<1;
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <_ZN8hardware9setBuzzerEh+0xb8>

                        // Px2
                        case 14:
                        case 25:
                        case 32:
                        return 1<<2;
     fce:	84 e0       	ldi	r24, 0x04	; 4
     fd0:	0b c0       	rjmp	.+22     	; 0xfe8 <_ZN8hardware9setBuzzerEh+0xb8>

                        // Px3
                        case 15:
                        case 26:
                        case 1:
                        return 1<<3;
     fd2:	88 e0       	ldi	r24, 0x08	; 8
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <_ZN8hardware9setBuzzerEh+0xb8>

                        // Px4
                        case 16:
                        case 27:
                        case 2:
                        return 1<<4;
     fd6:	80 e1       	ldi	r24, 0x10	; 16
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <_ZN8hardware9setBuzzerEh+0xb8>

                        // Px5
                        case 17:
                        case 28:
                        case 9:
                        return 1<<5;
     fda:	80 e2       	ldi	r24, 0x20	; 32
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <_ZN8hardware9setBuzzerEh+0xb8>

                        // Px6
                        case 7:
                        case 29:
                        case 10:
                        return 1<<6;
     fde:	80 e4       	ldi	r24, 0x40	; 64
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <_ZN8hardware9setBuzzerEh+0xb8>

                        // Px7
                        case 8:
                        case 11:
                        return 1<<7;
     fe2:	80 e8       	ldi	r24, 0x80	; 128
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <_ZN8hardware9setBuzzerEh+0xb8>

                        default:
                        return 0;
     fe6:	80 e0       	ldi	r24, 0x00	; 0

        inline void digitalWrite(uint8_t pinNumber, uint8_t value)
        {
                // Grab the port and proper bitmask for the pin
                volatile uint8_t *port = pinToPort(pinNumber);
                uint8_t bitmask = pinBitmask(pinNumber);
     fe8:	8f 83       	std	Y+7, r24	; 0x07

                // Set the output
                if (value) {
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	88 23       	and	r24, r24
     fee:	61 f0       	breq	.+24     	; 0x1008 <_ZN8hardware9setBuzzerEh+0xd8>
                        *port |= bitmask;
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	9d 81       	ldd	r25, Y+5	; 0x05
     ff4:	fc 01       	movw	r30, r24
     ff6:	90 81       	ld	r25, Z
     ff8:	8f 81       	ldd	r24, Y+7	; 0x07
     ffa:	29 2f       	mov	r18, r25
     ffc:	28 2b       	or	r18, r24
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	9d 81       	ldd	r25, Y+5	; 0x05
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
}
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <_ZN8hardware9setBuzzerEh+0xf2>
                } else {
                        *port &= ~bitmask;
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	fc 01       	movw	r30, r24
    100e:	80 81       	ld	r24, Z
    1010:	98 2f       	mov	r25, r24
    1012:	8f 81       	ldd	r24, Y+7	; 0x07
    1014:	80 95       	com	r24
    1016:	89 23       	and	r24, r25
    1018:	28 2f       	mov	r18, r24
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	fc 01       	movw	r30, r24
    1020:	20 83       	st	Z, r18
    1022:	00 00       	nop
    1024:	28 96       	adiw	r28, 0x08	; 8
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <_ZN6Buzzer5soundENS_9SoundTypeE>:

} // namespace Buzzer


void Buzzer::sound(Buzzer::SoundType s)
{
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	00 d0       	rcall	.+0      	; 0x103c <_ZN6Buzzer5soundENS_9SoundTypeE+0x6>
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
    if (!settings.audioBeep)
    1044:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <settings+0x8>
    1048:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <settings+0x9>
    104c:	89 2b       	or	r24, r25
    104e:	21 f4       	brne	.+8      	; 0x1058 <_ZN6Buzzer5soundENS_9SoundTypeE+0x22>
        s = Off;
    1050:	88 e0       	ldi	r24, 0x08	; 8
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
    if(sound_ == s)
    1058:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <_ZN6Buzzer6sound_E>
    105c:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <_ZN6Buzzer6sound_E+0x1>
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	28 17       	cp	r18, r24
    1066:	39 07       	cpc	r19, r25
    1068:	59 f0       	breq	.+22     	; 0x1080 <_ZN6Buzzer5soundENS_9SoundTypeE+0x4a>
        return;
    sound_ = s;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <_ZN6Buzzer6sound_E+0x1>
    1072:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <_ZN6Buzzer6sound_E>
    begin();
    1076:	2e d0       	rcall	.+92     	; 0x10d4 <_ZN6Buzzer5beginEv>
    Time::delayDoIdle(50);
    1078:	82 e3       	ldi	r24, 0x32	; 50
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9b d3       	rcall	.+1846   	; 0x17b4 <_ZN4Time11delayDoIdleEj>
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <_ZN6Buzzer5soundENS_9SoundTypeE+0x4c>
void Buzzer::sound(Buzzer::SoundType s)
{
    if (!settings.audioBeep)
        s = Off;
    if(sound_ == s)
        return;
    1080:	00 00       	nop
    sound_ = s;
    begin();
    Time::delayDoIdle(50);
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <_ZN6Buzzer8soundOffEv>:

void Buzzer::soundOff()
{
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    sound_ = Off;
    1094:	88 e0       	ldi	r24, 0x08	; 8
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <_ZN6Buzzer6sound_E+0x1>
    109c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <_ZN6Buzzer6sound_E>
}
    10a0:	00 00       	nop
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	08 95       	ret

000010a8 <_ZN6Buzzer14soundIfSilenceENS_9SoundTypeE>:


void Buzzer::soundIfSilence(Buzzer::SoundType s)
{
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <_ZN6Buzzer14soundIfSilenceENS_9SoundTypeE+0x6>
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
    if(sound_ == Off)
    10b6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <_ZN6Buzzer6sound_E>
    10ba:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <_ZN6Buzzer6sound_E+0x1>
    10be:	08 97       	sbiw	r24, 0x08	; 8
    10c0:	19 f4       	brne	.+6      	; 0x10c8 <_ZN6Buzzer14soundIfSilenceENS_9SoundTypeE+0x20>
        sound(s);
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	b7 df       	rcall	.-146    	; 0x1036 <_ZN6Buzzer5soundENS_9SoundTypeE>
}
    10c8:	00 00       	nop
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <_ZN6Buzzer5beginEv>:


void Buzzer::begin()
{
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    begin_time_U16_ = Time::getInterruptsU16();
    10dc:	0b d3       	rcall	.+1558   	; 0x16f4 <_ZN4Time16getInterruptsU16Ev>
    10de:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
    10e2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
}
    10e6:	00 00       	nop
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	08 95       	ret

000010ee <_ZN6Buzzer6doIdleEv>:


void Buzzer::doIdle()
{
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	1f 92       	push	r1
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    uint8_t v2 = getSound(Time::diffU16(begin_time_U16_, Time::getInterruptsU16()));
    10f8:	fd d2       	rcall	.+1530   	; 0x16f4 <_ZN4Time16getInterruptsU16Ev>
    10fa:	9c 01       	movw	r18, r24
    10fc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
    1100:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
    1104:	b9 01       	movw	r22, r18
    1106:	6e d4       	rcall	.+2268   	; 0x19e4 <_ZN4Time7diffU16Ejj>
    1108:	1c d0       	rcall	.+56     	; 0x1142 <_ZN6Buzzer8getSoundEj>
    110a:	89 83       	std	Y+1, r24	; 0x01
    if(v2 != last_value_) {
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <_ZN6Buzzer11last_value_E>
    1116:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <_ZN6Buzzer11last_value_E+0x1>
    111a:	28 17       	cp	r18, r24
    111c:	39 07       	cpc	r19, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <_ZN6Buzzer6doIdleEv+0x4a>
        last_value_ = v2;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <_ZN6Buzzer11last_value_E+0x1>
    112a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <_ZN6Buzzer11last_value_E>
        hardware::setBuzzer(last_value_);
    112e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <_ZN6Buzzer11last_value_E>
    1132:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <_ZN6Buzzer11last_value_E+0x1>
    1136:	fc de       	rcall	.-520    	; 0xf30 <_ZN8hardware9setBuzzerEh>
    }
}
    1138:	00 00       	nop
    113a:	0f 90       	pop	r0
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <_ZN6Buzzer8getSoundEj>:

uint8_t Buzzer::getSound(uint16_t time)
{
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	00 d0       	rcall	.+0      	; 0x1148 <_ZN6Buzzer8getSoundEj+0x6>
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
    switch(sound_) {
    1150:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <_ZN6Buzzer6sound_E>
    1154:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <_ZN6Buzzer6sound_E+0x1>
    1158:	09 2e       	mov	r0, r25
    115a:	00 0c       	add	r0, r0
    115c:	aa 0b       	sbc	r26, r26
    115e:	bb 0b       	sbc	r27, r27
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	27 e0       	ldi	r18, 0x07	; 7
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	84 1b       	sub	r24, r20
    116a:	95 0b       	sbc	r25, r21
    116c:	28 17       	cp	r18, r24
    116e:	39 07       	cpc	r19, r25
    1170:	28 f1       	brcs	.+74     	; 0x11bc <_ZN6Buzzer8getSoundEj+0x7a>
    1172:	8d 5e       	subi	r24, 0xED	; 237
    1174:	9d 4f       	sbci	r25, 0xFD	; 253
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	08 95       	ret
    case Keyboard:             return getKeyboard(time);
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	9a 81       	ldd	r25, Y+2	; 0x02
    1180:	6f d0       	rcall	.+222    	; 0x1260 <_ZN6Buzzer11getKeyboardEj>
    1182:	1f c0       	rjmp	.+62     	; 0x11c2 <_ZN6Buzzer8getSoundEj+0x80>
    case Info:                 return getInfo(time);
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	b2 d0       	rcall	.+356    	; 0x12ee <_ZN6Buzzer7getInfoEj>
    118a:	1b c0       	rjmp	.+54     	; 0x11c2 <_ZN6Buzzer8getSoundEj+0x80>
    case Save:                 return getSave(time);
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	e4 d0       	rcall	.+456    	; 0x135a <_ZN6Buzzer7getSaveEj>
    1192:	17 c0       	rjmp	.+46     	; 0x11c2 <_ZN6Buzzer8getSoundEj+0x80>
    case Select:               return getSelect(time);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	7f d0       	rcall	.+254    	; 0x1298 <_ZN6Buzzer9getSelectEj>
    119a:	13 c0       	rjmp	.+38     	; 0x11c2 <_ZN6Buzzer8getSoundEj+0x80>
    case ProgramComplete:      return getProgramComplete(time);
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	13 d1       	rcall	.+550    	; 0x13c8 <_ZN6Buzzer18getProgramCompleteEj>
    11a2:	0f c0       	rjmp	.+30     	; 0x11c2 <_ZN6Buzzer8getSoundEj+0x80>
    case StartProgram:         return getStartProgram(time);
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	00 d1       	rcall	.+512    	; 0x13aa <_ZN6Buzzer15getStartProgramEj>
    11aa:	0b c0       	rjmp	.+22     	; 0x11c2 <_ZN6Buzzer8getSoundEj+0x80>
    case ReversedPolarity:     return getReversedPolarity(time);
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	63 d1       	rcall	.+710    	; 0x1478 <_ZN6Buzzer19getReversedPolarityEj>
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <_ZN6Buzzer8getSoundEj+0x80>
    case Error:                return getError(time);
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	a5 d1       	rcall	.+842    	; 0x1504 <_ZN6Buzzer8getErrorEj>
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <_ZN6Buzzer8getSoundEj+0x80>
    case Off:
    default:
                    return getOff(time);
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	39 d0       	rcall	.+114    	; 0x1234 <_ZN6Buzzer6getOffEj>
    }
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <_Z4waveih>:


uint8_t wave(int time, uint8_t size)
{
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <_Z4waveih+0x6>
    11d2:	1f 92       	push	r1
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	6b 83       	std	Y+3, r22	; 0x03
    if(time > 2*size)
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9c 01       	movw	r18, r24
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	28 17       	cp	r18, r24
    11f0:	39 07       	cpc	r19, r25
    11f2:	14 f4       	brge	.+4      	; 0x11f8 <_Z4waveih+0x2c>
        return 0;
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	18 c0       	rjmp	.+48     	; 0x1228 <_Z4waveih+0x5c>
    if(time > size)
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	28 17       	cp	r18, r24
    1204:	39 07       	cpc	r19, r25
    1206:	44 f4       	brge	.+16     	; 0x1218 <_Z4waveih+0x4c>
        return 2*size - time;
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	98 2f       	mov	r25, r24
    120c:	99 0f       	add	r25, r25
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	29 2f       	mov	r18, r25
    1212:	28 1b       	sub	r18, r24
    1214:	82 2f       	mov	r24, r18
    1216:	08 c0       	rjmp	.+16     	; 0x1228 <_Z4waveih+0x5c>
    if(time > 0)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	18 16       	cp	r1, r24
    121e:	19 06       	cpc	r1, r25
    1220:	14 f4       	brge	.+4      	; 0x1226 <_Z4waveih+0x5a>
        return time;
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <_Z4waveih+0x5c>
    return 0;
    1226:	80 e0       	ldi	r24, 0x00	; 0
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <_ZN6Buzzer6getOffEj>:



uint8_t Buzzer::getOff(uint16_t time)
{
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	00 d0       	rcall	.+0      	; 0x123a <_ZN6Buzzer6getOffEj+0x6>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
    return 0;
    1242:	80 e0       	ldi	r24, 0x00	; 0
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	08 95       	ret

0000124e <_ZN6Buzzer6setOffEv>:
uint8_t Buzzer::setOff()
{
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    soundOff();
    1256:	1a df       	rcall	.-460    	; 0x108c <_ZN6Buzzer8soundOffEv>
    return 0;
    1258:	80 e0       	ldi	r24, 0x00	; 0
}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <_ZN6Buzzer11getKeyboardEj>:


uint8_t Buzzer::getKeyboard(uint16_t time)
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	00 d0       	rcall	.+0      	; 0x1266 <_ZN6Buzzer11getKeyboardEj+0x6>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
    time/=2;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	96 95       	lsr	r25
    1274:	87 95       	ror	r24
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
    if(time > 20)
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	45 97       	sbiw	r24, 0x15	; 21
    1280:	10 f0       	brcs	.+4      	; 0x1286 <_ZN6Buzzer11getKeyboardEj+0x26>
        return setOff();
    1282:	e5 df       	rcall	.-54     	; 0x124e <_ZN6Buzzer6setOffEv>
    1284:	04 c0       	rjmp	.+8      	; 0x128e <_ZN6Buzzer11getKeyboardEj+0x2e>
    return wave(time, 10);
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	6a e0       	ldi	r22, 0x0A	; 10
    128c:	9f df       	rcall	.-194    	; 0x11cc <_Z4waveih>
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <_ZN6Buzzer9getSelectEj>:


uint8_t Buzzer::getSelect(uint16_t time)
{
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <_ZN6Buzzer9getSelectEj+0x8>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <_ZN6Buzzer9getSelectEj+0xa>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    int v = time/4;
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	96 95       	lsr	r25
    12b0:	87 95       	ror	r24
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
    if(v > 200)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	89 3c       	cpi	r24, 0xC9	; 201
    12c0:	91 05       	cpc	r25, r1
    12c2:	14 f0       	brlt	.+4      	; 0x12c8 <_ZN6Buzzer9getSelectEj+0x30>
        return setOff();
    12c4:	c4 df       	rcall	.-120    	; 0x124e <_ZN6Buzzer6setOffEv>
    12c6:	0b c0       	rjmp	.+22     	; 0x12de <_ZN6Buzzer9getSelectEj+0x46>
    return wave(v, 10) + wave(v-40, 10);
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	6a e0       	ldi	r22, 0x0A	; 10
    12ce:	7e df       	rcall	.-260    	; 0x11cc <_Z4waveih>
    12d0:	18 2f       	mov	r17, r24
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	88 97       	sbiw	r24, 0x28	; 40
    12d8:	6a e0       	ldi	r22, 0x0A	; 10
    12da:	78 df       	rcall	.-272    	; 0x11cc <_Z4waveih>
    12dc:	81 0f       	add	r24, r17
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	08 95       	ret

000012ee <_ZN6Buzzer7getInfoEj>:


uint8_t Buzzer::getInfo(uint16_t time)
{
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <_ZN6Buzzer7getInfoEj+0x6>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <_ZN6Buzzer7getInfoEj+0x8>
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t v = time%2000;
    12fe:	4b 81       	ldd	r20, Y+3	; 0x03
    1300:	5c 81       	ldd	r21, Y+4	; 0x04
    1302:	ca 01       	movw	r24, r20
    1304:	92 95       	swap	r25
    1306:	82 95       	swap	r24
    1308:	8f 70       	andi	r24, 0x0F	; 15
    130a:	89 27       	eor	r24, r25
    130c:	9f 70       	andi	r25, 0x0F	; 15
    130e:	89 27       	eor	r24, r25
    1310:	9c 01       	movw	r18, r24
    1312:	a3 e6       	ldi	r26, 0x63	; 99
    1314:	b0 e1       	ldi	r27, 0x10	; 16
    1316:	27 d4       	rcall	.+2126   	; 0x1b66 <__umulhisi3>
    1318:	bc 01       	movw	r22, r24
    131a:	76 95       	lsr	r23
    131c:	67 95       	ror	r22
    131e:	76 95       	lsr	r23
    1320:	67 95       	ror	r22
    1322:	76 95       	lsr	r23
    1324:	67 95       	ror	r22
    1326:	20 ed       	ldi	r18, 0xD0	; 208
    1328:	37 e0       	ldi	r19, 0x07	; 7
    132a:	62 9f       	mul	r22, r18
    132c:	c0 01       	movw	r24, r0
    132e:	63 9f       	mul	r22, r19
    1330:	90 0d       	add	r25, r0
    1332:	72 9f       	mul	r23, r18
    1334:	90 0d       	add	r25, r0
    1336:	11 24       	eor	r1, r1
    1338:	9a 01       	movw	r18, r20
    133a:	28 1b       	sub	r18, r24
    133c:	39 0b       	sbc	r19, r25
    133e:	c9 01       	movw	r24, r18
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
    return wave(v, 10);
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	6a e0       	ldi	r22, 0x0A	; 10
    134a:	40 df       	rcall	.-384    	; 0x11cc <_Z4waveih>
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <_ZN6Buzzer7getSaveEj>:

uint8_t Buzzer::getSave(uint16_t time)
{
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	00 d0       	rcall	.+0      	; 0x1360 <_ZN6Buzzer7getSaveEj+0x6>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <_ZN6Buzzer7getSaveEj+0x8>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t v = time/10;
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	9c 01       	movw	r18, r24
    1370:	ad ec       	ldi	r26, 0xCD	; 205
    1372:	bc ec       	ldi	r27, 0xCC	; 204
    1374:	f8 d3       	rcall	.+2032   	; 0x1b66 <__umulhisi3>
    1376:	96 95       	lsr	r25
    1378:	87 95       	ror	r24
    137a:	96 95       	lsr	r25
    137c:	87 95       	ror	r24
    137e:	96 95       	lsr	r25
    1380:	87 95       	ror	r24
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01

    if(v > 140)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	8d 38       	cpi	r24, 0x8D	; 141
    138c:	91 05       	cpc	r25, r1
    138e:	10 f0       	brcs	.+4      	; 0x1394 <_ZN6Buzzer7getSaveEj+0x3a>
        return setOff();
    1390:	5e df       	rcall	.-324    	; 0x124e <_ZN6Buzzer6setOffEv>
    1392:	04 c0       	rjmp	.+8      	; 0x139c <_ZN6Buzzer7getSaveEj+0x42>

    return wave(v, 20);
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	64 e1       	ldi	r22, 0x14	; 20
    139a:	18 df       	rcall	.-464    	; 0x11cc <_Z4waveih>
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <_ZN6Buzzer15getStartProgramEj>:

uint8_t Buzzer::getStartProgram(uint16_t time)
{
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <_ZN6Buzzer15getStartProgramEj+0x6>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	9a 83       	std	Y+2, r25	; 0x02
    13b6:	89 83       	std	Y+1, r24	; 0x01
    return getSelect(time);
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	9a 81       	ldd	r25, Y+2	; 0x02
    13bc:	6d df       	rcall	.-294    	; 0x1298 <_ZN6Buzzer9getSelectEj>
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <_ZN6Buzzer18getProgramCompleteEj>:


uint8_t Buzzer::getProgramComplete(uint16_t time)
{
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	28 97       	sbiw	r28, 0x08	; 8
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	98 87       	std	Y+8, r25	; 0x08
    13de:	8f 83       	std	Y+7, r24	; 0x07
    uint16_t val = time/10;
    13e0:	8f 81       	ldd	r24, Y+7	; 0x07
    13e2:	98 85       	ldd	r25, Y+8	; 0x08
    13e4:	9c 01       	movw	r18, r24
    13e6:	ad ec       	ldi	r26, 0xCD	; 205
    13e8:	bc ec       	ldi	r27, 0xCC	; 204
    13ea:	bd d3       	rcall	.+1914   	; 0x1b66 <__umulhisi3>
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	96 95       	lsr	r25
    13f2:	87 95       	ror	r24
    13f4:	96 95       	lsr	r25
    13f6:	87 95       	ror	r24
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
    uint16_t v = val%40;
    13fc:	49 81       	ldd	r20, Y+1	; 0x01
    13fe:	5a 81       	ldd	r21, Y+2	; 0x02
    1400:	9a 01       	movw	r18, r20
    1402:	ad ec       	ldi	r26, 0xCD	; 205
    1404:	bc ec       	ldi	r27, 0xCC	; 204
    1406:	af d3       	rcall	.+1886   	; 0x1b66 <__umulhisi3>
    1408:	9c 01       	movw	r18, r24
    140a:	36 95       	lsr	r19
    140c:	27 95       	ror	r18
    140e:	32 95       	swap	r19
    1410:	22 95       	swap	r18
    1412:	2f 70       	andi	r18, 0x0F	; 15
    1414:	23 27       	eor	r18, r19
    1416:	3f 70       	andi	r19, 0x0F	; 15
    1418:	23 27       	eor	r18, r19
    141a:	68 e2       	ldi	r22, 0x28	; 40
    141c:	62 9f       	mul	r22, r18
    141e:	c0 01       	movw	r24, r0
    1420:	63 9f       	mul	r22, r19
    1422:	90 0d       	add	r25, r0
    1424:	11 24       	eor	r1, r1
    1426:	9a 01       	movw	r18, r20
    1428:	28 1b       	sub	r18, r24
    142a:	39 0b       	sbc	r19, r25
    142c:	c9 01       	movw	r24, r18
    142e:	9c 83       	std	Y+4, r25	; 0x04
    1430:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t t = val/40;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	9c 01       	movw	r18, r24
    1438:	ad ec       	ldi	r26, 0xCD	; 205
    143a:	bc ec       	ldi	r27, 0xCC	; 204
    143c:	94 d3       	rcall	.+1832   	; 0x1b66 <__umulhisi3>
    143e:	96 95       	lsr	r25
    1440:	87 95       	ror	r24
    1442:	92 95       	swap	r25
    1444:	82 95       	swap	r24
    1446:	8f 70       	andi	r24, 0x0F	; 15
    1448:	89 27       	eor	r24, r25
    144a:	9f 70       	andi	r25, 0x0F	; 15
    144c:	89 27       	eor	r24, r25
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05

    if(t > 10)
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	0b 97       	sbiw	r24, 0x0b	; 11
    1458:	10 f0       	brcs	.+4      	; 0x145e <_ZN6Buzzer18getProgramCompleteEj+0x96>
        return setOff();
    145a:	f9 de       	rcall	.-526    	; 0x124e <_ZN6Buzzer6setOffEv>
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <_ZN6Buzzer18getProgramCompleteEj+0x9e>
    return wave(v, 20);
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	64 e1       	ldi	r22, 0x14	; 20
    1464:	b3 de       	rcall	.-666    	; 0x11cc <_Z4waveih>
}
    1466:	28 96       	adiw	r28, 0x08	; 8
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <_ZN6Buzzer19getReversedPolarityEj>:

uint8_t Buzzer::getReversedPolarity(uint16_t time)
{
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	00 d0       	rcall	.+0      	; 0x147e <_ZN6Buzzer19getReversedPolarityEj+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <_ZN6Buzzer19getReversedPolarityEj+0x8>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <_ZN6Buzzer19getReversedPolarityEj+0xa>
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    uint16_t val = time/10;
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	9c 01       	movw	r18, r24
    1490:	ad ec       	ldi	r26, 0xCD	; 205
    1492:	bc ec       	ldi	r27, 0xCC	; 204
    1494:	68 d3       	rcall	.+1744   	; 0x1b66 <__umulhisi3>
    1496:	96 95       	lsr	r25
    1498:	87 95       	ror	r24
    149a:	96 95       	lsr	r25
    149c:	87 95       	ror	r24
    149e:	96 95       	lsr	r25
    14a0:	87 95       	ror	r24
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
    uint16_t v = val%40;
    14a6:	49 81       	ldd	r20, Y+1	; 0x01
    14a8:	5a 81       	ldd	r21, Y+2	; 0x02
    14aa:	9a 01       	movw	r18, r20
    14ac:	ad ec       	ldi	r26, 0xCD	; 205
    14ae:	bc ec       	ldi	r27, 0xCC	; 204
    14b0:	5a d3       	rcall	.+1716   	; 0x1b66 <__umulhisi3>
    14b2:	9c 01       	movw	r18, r24
    14b4:	36 95       	lsr	r19
    14b6:	27 95       	ror	r18
    14b8:	32 95       	swap	r19
    14ba:	22 95       	swap	r18
    14bc:	2f 70       	andi	r18, 0x0F	; 15
    14be:	23 27       	eor	r18, r19
    14c0:	3f 70       	andi	r19, 0x0F	; 15
    14c2:	23 27       	eor	r18, r19
    14c4:	68 e2       	ldi	r22, 0x28	; 40
    14c6:	62 9f       	mul	r22, r18
    14c8:	c0 01       	movw	r24, r0
    14ca:	63 9f       	mul	r22, r19
    14cc:	90 0d       	add	r25, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	9a 01       	movw	r18, r20
    14d2:	28 1b       	sub	r18, r24
    14d4:	39 0b       	sbc	r19, r25
    14d6:	c9 01       	movw	r24, r18
    14d8:	9c 83       	std	Y+4, r25	; 0x04
    14da:	8b 83       	std	Y+3, r24	; 0x03

    if(val > 80)
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	81 35       	cpi	r24, 0x51	; 81
    14e2:	91 05       	cpc	r25, r1
    14e4:	10 f0       	brcs	.+4      	; 0x14ea <_ZN6Buzzer19getReversedPolarityEj+0x72>
        return setOff();
    14e6:	b3 de       	rcall	.-666    	; 0x124e <_ZN6Buzzer6setOffEv>
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <_ZN6Buzzer19getReversedPolarityEj+0x7a>
    return wave(v, 20);
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	64 e1       	ldi	r22, 0x14	; 20
    14f0:	6d de       	rcall	.-806    	; 0x11cc <_Z4waveih>
}
    14f2:	26 96       	adiw	r28, 0x06	; 6
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <_ZN6Buzzer8getErrorEj>:

uint8_t Buzzer::getError(uint16_t time)
{
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	28 97       	sbiw	r28, 0x08	; 8
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	98 87       	std	Y+8, r25	; 0x08
    151a:	8f 83       	std	Y+7, r24	; 0x07
    uint16_t val = time/10;
    151c:	8f 81       	ldd	r24, Y+7	; 0x07
    151e:	98 85       	ldd	r25, Y+8	; 0x08
    1520:	9c 01       	movw	r18, r24
    1522:	ad ec       	ldi	r26, 0xCD	; 205
    1524:	bc ec       	ldi	r27, 0xCC	; 204
    1526:	1f d3       	rcall	.+1598   	; 0x1b66 <__umulhisi3>
    1528:	96 95       	lsr	r25
    152a:	87 95       	ror	r24
    152c:	96 95       	lsr	r25
    152e:	87 95       	ror	r24
    1530:	96 95       	lsr	r25
    1532:	87 95       	ror	r24
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	89 83       	std	Y+1, r24	; 0x01
    uint16_t v = val%40;
    1538:	49 81       	ldd	r20, Y+1	; 0x01
    153a:	5a 81       	ldd	r21, Y+2	; 0x02
    153c:	9a 01       	movw	r18, r20
    153e:	ad ec       	ldi	r26, 0xCD	; 205
    1540:	bc ec       	ldi	r27, 0xCC	; 204
    1542:	11 d3       	rcall	.+1570   	; 0x1b66 <__umulhisi3>
    1544:	9c 01       	movw	r18, r24
    1546:	36 95       	lsr	r19
    1548:	27 95       	ror	r18
    154a:	32 95       	swap	r19
    154c:	22 95       	swap	r18
    154e:	2f 70       	andi	r18, 0x0F	; 15
    1550:	23 27       	eor	r18, r19
    1552:	3f 70       	andi	r19, 0x0F	; 15
    1554:	23 27       	eor	r18, r19
    1556:	68 e2       	ldi	r22, 0x28	; 40
    1558:	62 9f       	mul	r22, r18
    155a:	c0 01       	movw	r24, r0
    155c:	63 9f       	mul	r22, r19
    155e:	90 0d       	add	r25, r0
    1560:	11 24       	eor	r1, r1
    1562:	9a 01       	movw	r18, r20
    1564:	28 1b       	sub	r18, r24
    1566:	39 0b       	sbc	r19, r25
    1568:	c9 01       	movw	r24, r18
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t t = val/40;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	9c 01       	movw	r18, r24
    1574:	ad ec       	ldi	r26, 0xCD	; 205
    1576:	bc ec       	ldi	r27, 0xCC	; 204
    1578:	f6 d2       	rcall	.+1516   	; 0x1b66 <__umulhisi3>
    157a:	96 95       	lsr	r25
    157c:	87 95       	ror	r24
    157e:	92 95       	swap	r25
    1580:	82 95       	swap	r24
    1582:	8f 70       	andi	r24, 0x0F	; 15
    1584:	89 27       	eor	r24, r25
    1586:	9f 70       	andi	r25, 0x0F	; 15
    1588:	89 27       	eor	r24, r25
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05

    if(t > 10)
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	0b 97       	sbiw	r24, 0x0b	; 11
    1594:	10 f0       	brcs	.+4      	; 0x159a <_ZN6Buzzer8getErrorEj+0x96>
        return setOff();
    1596:	5b de       	rcall	.-842    	; 0x124e <_ZN6Buzzer6setOffEv>
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <_ZN6Buzzer8getErrorEj+0x9e>
    return wave(v, 20);
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	64 e1       	ldi	r22, 0x14	; 20
    15a0:	15 de       	rcall	.-982    	; 0x11cc <_Z4waveih>
}
    15a2:	28 96       	adiw	r28, 0x08	; 8
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <_ZL12__iCliRetValv>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    cli();
    15bc:	f8 94       	cli
    return 1;
    15be:	81 e0       	ldi	r24, 0x01	; 1
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <_ZL10__iRestorePKh>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <_ZL10__iRestorePKh+0x6>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    15d4:	8f e5       	ldi	r24, 0x5F	; 95
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	29 81       	ldd	r18, Y+1	; 0x01
    15da:	3a 81       	ldd	r19, Y+2	; 0x02
    15dc:	f9 01       	movw	r30, r18
    15de:	20 81       	ld	r18, Z
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    15e4:	00 00       	nop
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <_ZN4Time13getInterruptsEv>:
// time measurement

namespace Time {
    volatile uint32_t interrupts_ = 0;

    uint32_t getInterrupts() {
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <_ZN4Time13getInterruptsEv+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <_ZN4Time13getInterruptsEv+0x8>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <_ZN4Time13getInterruptsEv+0xa>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
        uint32_t v;
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    15fe:	8f e5       	ldi	r24, 0x5F	; 95
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	fc 01       	movw	r30, r24
    1604:	80 81       	ld	r24, Z
    1606:	8e 83       	std	Y+6, r24	; 0x06
    1608:	d5 df       	rcall	.-86     	; 0x15b4 <_ZL12__iCliRetValv>
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	88 23       	and	r24, r24
    1610:	71 f0       	breq	.+28     	; 0x162e <_ZN4Time13getInterruptsEv+0x3e>
            v = interrupts_;
    1612:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <_ZN4Time11interrupts_E>
    1616:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <_ZN4Time11interrupts_E+0x1>
    161a:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <_ZN4Time11interrupts_E+0x2>
    161e:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <_ZN4Time11interrupts_E+0x3>
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	ab 83       	std	Y+3, r26	; 0x03
    1628:	bc 83       	std	Y+4, r27	; 0x04
namespace Time {
    volatile uint32_t interrupts_ = 0;

    uint32_t getInterrupts() {
        uint32_t v;
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    162a:	1d 82       	std	Y+5, r1	; 0x05
    162c:	ef cf       	rjmp	.-34     	; 0x160c <_ZN4Time13getInterruptsEv+0x1c>
    162e:	ce 01       	movw	r24, r28
    1630:	06 96       	adiw	r24, 0x06	; 6
    1632:	c9 df       	rcall	.-110    	; 0x15c6 <_ZL10__iRestorePKh>
            v = interrupts_;
        }
        return v;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	ab 81       	ldd	r26, Y+3	; 0x03
    163a:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	26 96       	adiw	r28, 0x06	; 6
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	08 95       	ret

00001652 <_ZN4Time6doIdleEv>:
    inline void doInterrupt() {
        interrupts_++;
    }

    void doIdle() {
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
        //Monitor::doIdle();
        //SerialLog::doIdle();
        //Buzzer::doIdle();
        //AnalogInputs::doIdle();
    }
    165a:	00 00       	nop
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <_ZN4Time8callbackEv>:

    void callback() {
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
        static uint8_t slowInterval = TIMER_SLOW_INTERRUPT_INTERVAL;
        Time::doInterrupt();
    166a:	d5 d1       	rcall	.+938    	; 0x1a16 <_ZN4Time11doInterruptEv>
        if(--slowInterval == 0){
    166c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1670:	81 50       	subi	r24, 0x01	; 1
    1672:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    1676:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	99 23       	and	r25, r25
    167e:	09 f0       	breq	.+2      	; 0x1682 <_ZN4Time8callbackEv+0x20>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	88 23       	and	r24, r24
    1684:	19 f0       	breq	.+6      	; 0x168c <_ZN4Time8callbackEv+0x2a>
            slowInterval = TIMER_SLOW_INTERRUPT_INTERVAL;
    1686:	81 ee       	ldi	r24, 0xE1	; 225
    1688:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
            //AnalogInputs::doSlowInterrupt();
            //Monitor::doSlowInterrupt();
        }
    }
    168c:	00 00       	nop
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <_ZN4Time14getMilisecondsEv>:
}

uint32_t Time::getMiliseconds()
{
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	00 d0       	rcall	.+0      	; 0x169a <_ZN4Time14getMilisecondsEv+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <_ZN4Time14getMilisecondsEv+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    uint32_t retu = getInterrupts();
    16a0:	a7 df       	rcall	.-178    	; 0x15f0 <_ZN4Time13getInterruptsEv>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	ab 83       	std	Y+3, r26	; 0x03
    16ac:	bc 83       	std	Y+4, r27	; 0x04
#if TIMER_INTERRUPT_PERIOD_MICROSECONDS == 500
    retu /= 2;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	ab 81       	ldd	r26, Y+3	; 0x03
    16b4:	bc 81       	ldd	r27, Y+4	; 0x04
    16b6:	b6 95       	lsr	r27
    16b8:	a7 95       	ror	r26
    16ba:	97 95       	ror	r25
    16bc:	87 95       	ror	r24
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	ab 83       	std	Y+3, r26	; 0x03
    16c4:	bc 83       	std	Y+4, r27	; 0x04
#warning "TIMER_INTERRUPT_PERIOD_MICROSECONDS != 500"
    retu *= TIMER_INTERRUPT_PERIOD_MICROSECONDS;
    retu /= 1000;
#endif

    return retu;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	ab 81       	ldd	r26, Y+3	; 0x03
    16cc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    16ce:	bc 01       	movw	r22, r24
    16d0:	cd 01       	movw	r24, r26
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	08 95       	ret

000016e0 <_ZN4Time17getMilisecondsU16Ev>:

uint16_t Time::getMilisecondsU16() {
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    return getMiliseconds();
    16e8:	d5 df       	rcall	.-86     	; 0x1694 <_ZN4Time14getMilisecondsEv>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	08 95       	ret

000016f4 <_ZN4Time16getInterruptsU16Ev>:

uint16_t Time::getInterruptsU16() {
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    return getInterrupts();
    16fc:	79 df       	rcall	.-270    	; 0x15f0 <_ZN4Time13getInterruptsEv>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
}
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <_ZN4Time10getSecondsEv>:


uint32_t Time::getSeconds() {
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    return getMiliseconds()/1000;
    1710:	c1 df       	rcall	.-126    	; 0x1694 <_ZN4Time14getMilisecondsEv>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	28 ee       	ldi	r18, 0xE8	; 232
    1718:	33 e0       	ldi	r19, 0x03	; 3
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	ff d1       	rcall	.+1022   	; 0x1b22 <__udivmodsi4>
    1724:	da 01       	movw	r26, r20
    1726:	c9 01       	movw	r24, r18
}
    1728:	bc 01       	movw	r22, r24
    172a:	cd 01       	movw	r24, r26
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <_ZN4Time13getSecondsU16Ev>:

uint16_t Time::getSecondsU16() {
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    return getSeconds();
    173a:	e6 df       	rcall	.-52     	; 0x1708 <_ZN4Time10getSecondsEv>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret

00001746 <_ZN4Time13getMinutesU16Ev>:

uint16_t Time::getMinutesU16() {
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    return getMiliseconds()/60000;
    174e:	a2 df       	rcall	.-188    	; 0x1694 <_ZN4Time14getMilisecondsEv>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	20 e6       	ldi	r18, 0x60	; 96
    1756:	3a ee       	ldi	r19, 0xEA	; 234
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	e0 d1       	rcall	.+960    	; 0x1b22 <__udivmodsi4>
    1762:	da 01       	movw	r26, r20
    1764:	c9 01       	movw	r24, r18
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

0000176c <_ZN4Time5delayEj>:

void Time::delay(uint16_t ms)
{
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	00 d0       	rcall	.+0      	; 0x1772 <_ZN4Time5delayEj+0x6>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <_ZN4Time5delayEj+0x8>
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	9c 83       	std	Y+4, r25	; 0x04
    177a:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t start = getMilisecondsU16();
    177c:	b1 df       	rcall	.-158    	; 0x16e0 <_ZN4Time17getMilisecondsU16Ev>
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01

    while(diffU16(start, getMilisecondsU16()) < ms) {};
    1782:	ae df       	rcall	.-164    	; 0x16e0 <_ZN4Time17getMilisecondsU16Ev>
    1784:	9c 01       	movw	r18, r24
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	9a 81       	ldd	r25, Y+2	; 0x02
    178a:	b9 01       	movw	r22, r18
    178c:	2b d1       	rcall	.+598    	; 0x19e4 <_ZN4Time7diffU16Ejj>
    178e:	9c 01       	movw	r18, r24
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	28 17       	cp	r18, r24
    1798:	39 07       	cpc	r19, r25
    179a:	08 f0       	brcs	.+2      	; 0x179e <_ZN4Time5delayEj+0x32>
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	44 23       	and	r20, r20
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <_ZN4Time5delayEj+0x38>
    17a2:	ef cf       	rjmp	.-34     	; 0x1782 <_ZN4Time5delayEj+0x16>
}
    17a4:	00 00       	nop
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <_ZN4Time11delayDoIdleEj>:

//warning: this method runs stuff in background,
//delay may take significantly longer than "ms"
void Time::delayDoIdle(uint16_t ms)
{
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <_ZN4Time11delayDoIdleEj+0x6>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <_ZN4Time11delayDoIdleEj+0x8>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <_ZN4Time11delayDoIdleEj+0xa>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
    uint16_t start = getMilisecondsU16();
    17c6:	8c df       	rcall	.-232    	; 0x16e0 <_ZN4Time17getMilisecondsU16Ev>
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
    uint16_t delay;
    do {
        doIdle();
    17cc:	42 df       	rcall	.-380    	; 0x1652 <_ZN4Time6doIdleEv>
        delay = diffU16(start, getMilisecondsU16());
    17ce:	88 df       	rcall	.-240    	; 0x16e0 <_ZN4Time17getMilisecondsU16Ev>
    17d0:	9c 01       	movw	r18, r24
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	b9 01       	movw	r22, r18
    17d8:	05 d1       	rcall	.+522    	; 0x19e4 <_ZN4Time7diffU16Ejj>
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
    } while (delay < ms);
    17de:	2b 81       	ldd	r18, Y+3	; 0x03
    17e0:	3c 81       	ldd	r19, Y+4	; 0x04
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	28 17       	cp	r18, r24
    17e8:	39 07       	cpc	r19, r25
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <_ZN4Time11delayDoIdleEj+0x3a>
//delay may take significantly longer than "ms"
void Time::delayDoIdle(uint16_t ms)
{
    uint16_t start = getMilisecondsU16();
    uint16_t delay;
    do {
    17ec:	ef cf       	rjmp	.-34     	; 0x17cc <_ZN4Time11delayDoIdleEj+0x18>
        doIdle();
        delay = diffU16(start, getMilisecondsU16());
    } while (delay < ms);

    //LogDebug("delayDoIdle ms:", ms, " delay:", delay);
}
    17ee:	00 00       	nop
    17f0:	26 96       	adiw	r28, 0x06	; 6
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <setup>:
#include "Buzzer.h"
#include "Hardware.h"
#include "cpu.h"

void setup()
{
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    hardware::initializePins();
    180a:	6d d8       	rcall	.-3878   	; 0x8e6 <_ZN8hardware14initializePinsEv>
    cpu::init();
    180c:	2a d1       	rcall	.+596    	; 0x1a62 <_ZN3cpu4initEv>

    hardware::initialize();
    180e:	88 db       	rcall	.-2288   	; 0xf20 <_ZN8hardware10initializeEv>
    Time::initialize();
    1810:	76 d6       	rcall	.+3308   	; 0x24fe <__TEXT_REGION_LENGTH__+0x4fe>
    Buzzer::soundStartProgram();
    1812:	1c d1       	rcall	.+568    	; 0x1a4c <_ZN6Buzzer17soundStartProgramEv>
}
    1814:	00 00       	nop
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <main>:

int main(void)
{
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    setup();
    1824:	ee df       	rcall	.-36     	; 0x1802 <setup>
//#else
//    eeprom::check();
//    MainMenu::run();
//#endif

    return 0;
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
}
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	08 95       	ret

00001830 <_ZNK8Settings12getUARTspeedEv>:
    57600,
    115200,
};


uint32_t Settings::getUARTspeed() const {
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	00 d0       	rcall	.+0      	; 0x1836 <_ZNK8Settings12getUARTspeedEv+0x6>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	89 83       	std	Y+1, r24	; 0x01
    return pgm::read(&UARTSpeedValue[UARTspeed]);
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	fc 01       	movw	r30, r24
    1844:	84 8d       	ldd	r24, Z+28	; 0x1c
    1846:	95 8d       	ldd	r25, Z+29	; 0x1d
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	86 5a       	subi	r24, 0xA6	; 166
    1852:	9b 4f       	sbci	r25, 0xFB	; 251
    1854:	92 d0       	rcall	.+292    	; 0x197a <_ZN3pgmL4readImEET_PKS1_>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
}
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <_ZN8Settings4loadEv>:

void Settings::load() {
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
//    eeprom::read(settings, &eeprom::data.settings);
    settings.apply();
    1870:	88 e7       	ldi	r24, 0x78	; 120
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	75 d0       	rcall	.+234    	; 0x1960 <_ZN8Settings5applyEv>
}
    1876:	00 00       	nop
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <_ZN8Settings4saveEv>:

void Settings::save() {
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
//    eeprom::write(&eeprom::data.settings, settings);
//    eeprom::restoreSettingsCRC();

    settings.apply();
    1886:	88 e7       	ldi	r24, 0x78	; 120
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	6a d0       	rcall	.+212    	; 0x1960 <_ZN8Settings5applyEv>
}
    188c:	00 00       	nop
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	08 95       	ret

00001894 <_ZN8Settings10setDefaultEv>:

void Settings::setDefault()
{
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	00 d0       	rcall	.+0      	; 0x189a <_ZN8Settings10setDefaultEv+0x6>
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	9a 83       	std	Y+2, r25	; 0x02
    18a0:	89 83       	std	Y+1, r24	; 0x01
    pgm::read(*this, &defaultSettings);
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	66 e3       	ldi	r22, 0x36	; 54
    18a8:	74 e0       	ldi	r23, 0x04	; 4
    18aa:	7f d0       	rcall	.+254    	; 0x19aa <_ZN3pgmL4readI8SettingsEEvRT_PKS2_>
}
    18ac:	00 00       	nop
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <_ZN8Settings14restoreDefaultEv>:
void Settings::restoreDefault() {
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    settings.setDefault();
    18c0:	88 e7       	ldi	r24, 0x78	; 120
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	e7 df       	rcall	.-50     	; 0x1894 <_ZN8Settings10setDefaultEv>
    Settings::save();
    18c6:	db df       	rcall	.-74     	; 0x187e <_ZN8Settings4saveEv>
}
    18c8:	00 00       	nop
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <_ZN8Settings5checkEv>:

void Settings::check() {
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    if(settings.maxIc < settings.minIc) {
    18d8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <settings+0xc>
    18dc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <settings+0xd>
    18e0:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <settings+0xa>
    18e4:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <settings+0xb>
    18e8:	28 17       	cp	r18, r24
    18ea:	39 07       	cpc	r19, r25
    18ec:	40 f4       	brcc	.+16     	; 0x18fe <_ZN8Settings5checkEv+0x2e>
        settings.maxIc = settings.minIc;
    18ee:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <settings+0xa>
    18f2:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <settings+0xb>
    18f6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <settings+0xd>
    18fa:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <settings+0xc>
    }
    if(settings.maxIc > MAX_CHARGE_I) {
    18fe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <settings+0xc>
    1902:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <settings+0xd>
    1906:	89 38       	cpi	r24, 0x89	; 137
    1908:	93 41       	sbci	r25, 0x13	; 19
    190a:	30 f0       	brcs	.+12     	; 0x1918 <_ZN8Settings5checkEv+0x48>
        settings.maxIc = MAX_CHARGE_I;
    190c:	88 e8       	ldi	r24, 0x88	; 136
    190e:	93 e1       	ldi	r25, 0x13	; 19
    1910:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <settings+0xd>
    1914:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <settings+0xc>
    }

    if(settings.maxId < settings.minId) {
    1918:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <settings+0x10>
    191c:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <settings+0x11>
    1920:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <settings+0xe>
    1924:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <settings+0xf>
    1928:	28 17       	cp	r18, r24
    192a:	39 07       	cpc	r19, r25
    192c:	40 f4       	brcc	.+16     	; 0x193e <_ZN8Settings5checkEv+0x6e>
        settings.maxId = settings.minId;
    192e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <settings+0xe>
    1932:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <settings+0xf>
    1936:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <settings+0x11>
    193a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <settings+0x10>
    }
    if(settings.maxId > MAX_DISCHARGE_I) {
    193e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <settings+0x10>
    1942:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <settings+0x11>
    1946:	89 3e       	cpi	r24, 0xE9	; 233
    1948:	93 40       	sbci	r25, 0x03	; 3
    194a:	30 f0       	brcs	.+12     	; 0x1958 <_ZN8Settings5checkEv+0x88>
        settings.maxId = MAX_DISCHARGE_I;
    194c:	88 ee       	ldi	r24, 0xE8	; 232
    194e:	93 e0       	ldi	r25, 0x03	; 3
    1950:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <settings+0x11>
    1954:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <settings+0x10>
    }
}
    1958:	00 00       	nop
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <_ZN8Settings5applyEv>:


void Settings::apply() {
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	00 d0       	rcall	.+0      	; 0x1966 <_ZN8Settings5applyEv+0x6>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	89 83       	std	Y+1, r24	; 0x01
#ifdef ENABLE_LCD_BACKLIGHT
    hardware::setLCDBacklight(backlight);
#endif
//    hardware::setExternalTemperatueOutput(externT);
}
    196e:	00 00       	nop
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <_ZN3pgmL4readImEET_PKS1_>:
            t = (Type)pgm_read_byte(addressP);
        }
    };

    template<class Type>
    static Type read(const Type * addressP) {
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	00 d0       	rcall	.+0      	; 0x1980 <_ZN3pgmL4readImEET_PKS1_+0x6>
    1980:	1f 92       	push	r1
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	9b 83       	std	Y+3, r25	; 0x03
    1988:	8a 83       	std	Y+2, r24	; 0x02
        return read_impl<Type, sizeof(Type)>() (addressP);
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	bc 01       	movw	r22, r24
    1990:	ce 01       	movw	r24, r28
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	6f d0       	rcall	.+222    	; 0x1a74 <_ZN3pgm9read_implImLi4EEclEPKm>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    }
    199a:	bc 01       	movw	r22, r24
    199c:	cd 01       	movw	r24, r26
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <_ZN3pgmL4readI8SettingsEEvRT_PKS2_>:

    template<class Type>
    static void read(Type &t, const Type * addressP) {
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <_ZN3pgmL4readI8SettingsEEvRT_PKS2_+0x6>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <_ZN3pgmL4readI8SettingsEEvRT_PKS2_+0x8>
    19b2:	1f 92       	push	r1
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	9b 83       	std	Y+3, r25	; 0x03
    19ba:	8a 83       	std	Y+2, r24	; 0x02
    19bc:	7d 83       	std	Y+5, r23	; 0x05
    19be:	6c 83       	std	Y+4, r22	; 0x04
        read_impl<Type, sizeof(Type)>() (t, addressP);
    19c0:	2c 81       	ldd	r18, Y+4	; 0x04
    19c2:	3d 81       	ldd	r19, Y+5	; 0x05
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	9b 81       	ldd	r25, Y+3	; 0x03
    19c8:	a9 01       	movw	r20, r18
    19ca:	bc 01       	movw	r22, r24
    19cc:	ce 01       	movw	r24, r28
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	89 d0       	rcall	.+274    	; 0x1ae4 <_ZN3pgm9read_implI8SettingsLi36EEclERS1_PKS1_>
    }
    19d2:	00 00       	nop
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <_ZN4Time7diffU16Ejj>:

    //warning: this method runs stuff in background,
    //delay may take significantly longer than "ms"
    void delayDoIdle(uint16_t ms);

    inline uint16_t diffU16(uint16_t start, uint16_t end) {
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <_ZN4Time7diffU16Ejj+0x6>
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <_ZN4Time7diffU16Ejj+0x8>
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	7c 83       	std	Y+4, r23	; 0x04
    19f6:	6b 83       	std	Y+3, r22	; 0x03
        return end - start;
    19f8:	2b 81       	ldd	r18, Y+3	; 0x03
    19fa:	3c 81       	ldd	r19, Y+4	; 0x04
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	a9 01       	movw	r20, r18
    1a02:	48 1b       	sub	r20, r24
    1a04:	59 0b       	sbc	r21, r25
    1a06:	ca 01       	movw	r24, r20
    }
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <_ZN4Time11doInterruptEv>:
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
            v = interrupts_;
        }
        return v;
    }
    inline void doInterrupt() {
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
        interrupts_++;
    1a1e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <_ZN4Time11interrupts_E>
    1a22:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <_ZN4Time11interrupts_E+0x1>
    1a26:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <_ZN4Time11interrupts_E+0x2>
    1a2a:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <_ZN4Time11interrupts_E+0x3>
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	a1 1d       	adc	r26, r1
    1a32:	b1 1d       	adc	r27, r1
    1a34:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <_ZN4Time11interrupts_E>
    1a38:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <_ZN4Time11interrupts_E+0x1>
    1a3c:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <_ZN4Time11interrupts_E+0x2>
    1a40:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <_ZN4Time11interrupts_E+0x3>
    }
    1a44:	00 00       	nop
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <_ZN6Buzzer17soundStartProgramEv>:
    inline void soundKeyboard()             {soundIfSilence(Keyboard); }
    inline void soundInfo()                 {sound(Info); }
    inline void soundSave()                 {sound(Save); }
    inline void soundSelect()               {sound(Select); }
    inline void soundProgramComplete()      {sound(ProgramComplete); }
    inline void soundStartProgram()         {sound(StartProgram); }
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	84 e0       	ldi	r24, 0x04	; 4
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	ee da       	rcall	.-2596   	; 0x1036 <_ZN6Buzzer5soundENS_9SoundTypeE>
    1a5a:	00 00       	nop
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <_ZN3cpu4initEv>:
#define CPU_H_

#include <avr/interrupt.h>

namespace cpu {
    inline void init() {
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
        sei();
    1a6a:	78 94       	sei
    }
    1a6c:	00 00       	nop
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <_ZN3pgm9read_implImLi4EEclEPKm>:
        }
    };

    template<class Type>
    struct read_impl<Type, 4> {
        inline Type operator()(const Type * addressP) {
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	9c 87       	std	Y+12, r25	; 0x0c
    1a8a:	8b 87       	std	Y+11, r24	; 0x0b
    1a8c:	7e 87       	std	Y+14, r23	; 0x0e
    1a8e:	6d 87       	std	Y+13, r22	; 0x0d
            uint32_t u = pgm_read_dword(addressP);
    1a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	9c 01       	movw	r18, r24
    1a9e:	f9 01       	movw	r30, r18
    1aa0:	85 91       	lpm	r24, Z+
    1aa2:	95 91       	lpm	r25, Z+
    1aa4:	a5 91       	lpm	r26, Z+
    1aa6:	b4 91       	lpm	r27, Z
    1aa8:	9f 01       	movw	r18, r30
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	ad 83       	std	Y+5, r26	; 0x05
    1ab0:	be 83       	std	Y+6, r27	; 0x06
    1ab2:	3a 83       	std	Y+2, r19	; 0x02
    1ab4:	29 83       	std	Y+1, r18	; 0x01
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	ad 81       	ldd	r26, Y+5	; 0x05
    1abc:	be 81       	ldd	r27, Y+6	; 0x06
    1abe:	8f 83       	std	Y+7, r24	; 0x07
    1ac0:	98 87       	std	Y+8, r25	; 0x08
    1ac2:	a9 87       	std	Y+9, r26	; 0x09
    1ac4:	ba 87       	std	Y+10, r27	; 0x0a
            return reinterpret_cast<Type&>(u);
    1ac6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac8:	98 85       	ldd	r25, Y+8	; 0x08
    1aca:	a9 85       	ldd	r26, Y+9	; 0x09
    1acc:	ba 85       	ldd	r27, Y+10	; 0x0a
        }
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	2e 96       	adiw	r28, 0x0e	; 14
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <_ZN3pgm9read_implI8SettingsLi36EEclERS1_PKS1_>:
        inline Type operator()(const Type * addressP) {
            Type t;
            memcpy_P(&t, addressP, sizeof(Type));
            return t;
        }
        inline void operator()(Type &t, const Type * addressP) {
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <_ZN3pgm9read_implI8SettingsLi36EEclERS1_PKS1_+0x6>
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <_ZN3pgm9read_implI8SettingsLi36EEclERS1_PKS1_+0x8>
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <_ZN3pgm9read_implI8SettingsLi36EEclERS1_PKS1_+0xa>
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	7c 83       	std	Y+4, r23	; 0x04
    1af8:	6b 83       	std	Y+3, r22	; 0x03
    1afa:	5e 83       	std	Y+6, r21	; 0x06
    1afc:	4d 83       	std	Y+5, r20	; 0x05
            memcpy_P(&t, addressP, sizeof(Type));
    1afe:	2d 81       	ldd	r18, Y+5	; 0x05
    1b00:	3e 81       	ldd	r19, Y+6	; 0x06
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	44 e2       	ldi	r20, 0x24	; 36
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	b9 01       	movw	r22, r18
    1b0c:	11 d2       	rcall	.+1058   	; 0x1f30 <memcpy_P>
        }
    1b0e:	00 00       	nop
    1b10:	26 96       	adiw	r28, 0x06	; 6
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	08 95       	ret

00001b22 <__udivmodsi4>:
    1b22:	a1 e2       	ldi	r26, 0x21	; 33
    1b24:	1a 2e       	mov	r1, r26
    1b26:	aa 1b       	sub	r26, r26
    1b28:	bb 1b       	sub	r27, r27
    1b2a:	fd 01       	movw	r30, r26
    1b2c:	0d c0       	rjmp	.+26     	; 0x1b48 <__udivmodsi4_ep>

00001b2e <__udivmodsi4_loop>:
    1b2e:	aa 1f       	adc	r26, r26
    1b30:	bb 1f       	adc	r27, r27
    1b32:	ee 1f       	adc	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	a2 17       	cp	r26, r18
    1b38:	b3 07       	cpc	r27, r19
    1b3a:	e4 07       	cpc	r30, r20
    1b3c:	f5 07       	cpc	r31, r21
    1b3e:	20 f0       	brcs	.+8      	; 0x1b48 <__udivmodsi4_ep>
    1b40:	a2 1b       	sub	r26, r18
    1b42:	b3 0b       	sbc	r27, r19
    1b44:	e4 0b       	sbc	r30, r20
    1b46:	f5 0b       	sbc	r31, r21

00001b48 <__udivmodsi4_ep>:
    1b48:	66 1f       	adc	r22, r22
    1b4a:	77 1f       	adc	r23, r23
    1b4c:	88 1f       	adc	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	1a 94       	dec	r1
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <__udivmodsi4_loop>
    1b54:	60 95       	com	r22
    1b56:	70 95       	com	r23
    1b58:	80 95       	com	r24
    1b5a:	90 95       	com	r25
    1b5c:	9b 01       	movw	r18, r22
    1b5e:	ac 01       	movw	r20, r24
    1b60:	bd 01       	movw	r22, r26
    1b62:	cf 01       	movw	r24, r30
    1b64:	08 95       	ret

00001b66 <__umulhisi3>:
    1b66:	a2 9f       	mul	r26, r18
    1b68:	b0 01       	movw	r22, r0
    1b6a:	b3 9f       	mul	r27, r19
    1b6c:	c0 01       	movw	r24, r0
    1b6e:	a3 9f       	mul	r26, r19
    1b70:	01 d0       	rcall	.+2      	; 0x1b74 <__umulhisi3+0xe>
    1b72:	b2 9f       	mul	r27, r18
    1b74:	70 0d       	add	r23, r0
    1b76:	81 1d       	adc	r24, r1
    1b78:	11 24       	eor	r1, r1
    1b7a:	91 1d       	adc	r25, r1
    1b7c:	08 95       	ret

00001b7e <__subsf3>:
    1b7e:	50 58       	subi	r21, 0x80	; 128

00001b80 <__addsf3>:
    1b80:	bb 27       	eor	r27, r27
    1b82:	aa 27       	eor	r26, r26
    1b84:	0e d0       	rcall	.+28     	; 0x1ba2 <__addsf3x>
    1b86:	33 c1       	rjmp	.+614    	; 0x1dee <__fp_round>
    1b88:	24 d1       	rcall	.+584    	; 0x1dd2 <__fp_pscA>
    1b8a:	30 f0       	brcs	.+12     	; 0x1b98 <__addsf3+0x18>
    1b8c:	29 d1       	rcall	.+594    	; 0x1de0 <__fp_pscB>
    1b8e:	20 f0       	brcs	.+8      	; 0x1b98 <__addsf3+0x18>
    1b90:	31 f4       	brne	.+12     	; 0x1b9e <__addsf3+0x1e>
    1b92:	9f 3f       	cpi	r25, 0xFF	; 255
    1b94:	11 f4       	brne	.+4      	; 0x1b9a <__addsf3+0x1a>
    1b96:	1e f4       	brtc	.+6      	; 0x1b9e <__addsf3+0x1e>
    1b98:	19 c1       	rjmp	.+562    	; 0x1dcc <__fp_nan>
    1b9a:	0e f4       	brtc	.+2      	; 0x1b9e <__addsf3+0x1e>
    1b9c:	e0 95       	com	r30
    1b9e:	e7 fb       	bst	r30, 7
    1ba0:	0f c1       	rjmp	.+542    	; 0x1dc0 <__fp_inf>

00001ba2 <__addsf3x>:
    1ba2:	e9 2f       	mov	r30, r25
    1ba4:	35 d1       	rcall	.+618    	; 0x1e10 <__fp_split3>
    1ba6:	80 f3       	brcs	.-32     	; 0x1b88 <__addsf3+0x8>
    1ba8:	ba 17       	cp	r27, r26
    1baa:	62 07       	cpc	r22, r18
    1bac:	73 07       	cpc	r23, r19
    1bae:	84 07       	cpc	r24, r20
    1bb0:	95 07       	cpc	r25, r21
    1bb2:	18 f0       	brcs	.+6      	; 0x1bba <__addsf3x+0x18>
    1bb4:	71 f4       	brne	.+28     	; 0x1bd2 <__addsf3x+0x30>
    1bb6:	9e f5       	brtc	.+102    	; 0x1c1e <__addsf3x+0x7c>
    1bb8:	4d c1       	rjmp	.+666    	; 0x1e54 <__fp_zero>
    1bba:	0e f4       	brtc	.+2      	; 0x1bbe <__addsf3x+0x1c>
    1bbc:	e0 95       	com	r30
    1bbe:	0b 2e       	mov	r0, r27
    1bc0:	ba 2f       	mov	r27, r26
    1bc2:	a0 2d       	mov	r26, r0
    1bc4:	0b 01       	movw	r0, r22
    1bc6:	b9 01       	movw	r22, r18
    1bc8:	90 01       	movw	r18, r0
    1bca:	0c 01       	movw	r0, r24
    1bcc:	ca 01       	movw	r24, r20
    1bce:	a0 01       	movw	r20, r0
    1bd0:	11 24       	eor	r1, r1
    1bd2:	ff 27       	eor	r31, r31
    1bd4:	59 1b       	sub	r21, r25
    1bd6:	99 f0       	breq	.+38     	; 0x1bfe <__addsf3x+0x5c>
    1bd8:	59 3f       	cpi	r21, 0xF9	; 249
    1bda:	50 f4       	brcc	.+20     	; 0x1bf0 <__addsf3x+0x4e>
    1bdc:	50 3e       	cpi	r21, 0xE0	; 224
    1bde:	68 f1       	brcs	.+90     	; 0x1c3a <__addsf3x+0x98>
    1be0:	1a 16       	cp	r1, r26
    1be2:	f0 40       	sbci	r31, 0x00	; 0
    1be4:	a2 2f       	mov	r26, r18
    1be6:	23 2f       	mov	r18, r19
    1be8:	34 2f       	mov	r19, r20
    1bea:	44 27       	eor	r20, r20
    1bec:	58 5f       	subi	r21, 0xF8	; 248
    1bee:	f3 cf       	rjmp	.-26     	; 0x1bd6 <__addsf3x+0x34>
    1bf0:	46 95       	lsr	r20
    1bf2:	37 95       	ror	r19
    1bf4:	27 95       	ror	r18
    1bf6:	a7 95       	ror	r26
    1bf8:	f0 40       	sbci	r31, 0x00	; 0
    1bfa:	53 95       	inc	r21
    1bfc:	c9 f7       	brne	.-14     	; 0x1bf0 <__addsf3x+0x4e>
    1bfe:	7e f4       	brtc	.+30     	; 0x1c1e <__addsf3x+0x7c>
    1c00:	1f 16       	cp	r1, r31
    1c02:	ba 0b       	sbc	r27, r26
    1c04:	62 0b       	sbc	r22, r18
    1c06:	73 0b       	sbc	r23, r19
    1c08:	84 0b       	sbc	r24, r20
    1c0a:	ba f0       	brmi	.+46     	; 0x1c3a <__addsf3x+0x98>
    1c0c:	91 50       	subi	r25, 0x01	; 1
    1c0e:	a1 f0       	breq	.+40     	; 0x1c38 <__addsf3x+0x96>
    1c10:	ff 0f       	add	r31, r31
    1c12:	bb 1f       	adc	r27, r27
    1c14:	66 1f       	adc	r22, r22
    1c16:	77 1f       	adc	r23, r23
    1c18:	88 1f       	adc	r24, r24
    1c1a:	c2 f7       	brpl	.-16     	; 0x1c0c <__addsf3x+0x6a>
    1c1c:	0e c0       	rjmp	.+28     	; 0x1c3a <__addsf3x+0x98>
    1c1e:	ba 0f       	add	r27, r26
    1c20:	62 1f       	adc	r22, r18
    1c22:	73 1f       	adc	r23, r19
    1c24:	84 1f       	adc	r24, r20
    1c26:	48 f4       	brcc	.+18     	; 0x1c3a <__addsf3x+0x98>
    1c28:	87 95       	ror	r24
    1c2a:	77 95       	ror	r23
    1c2c:	67 95       	ror	r22
    1c2e:	b7 95       	ror	r27
    1c30:	f7 95       	ror	r31
    1c32:	9e 3f       	cpi	r25, 0xFE	; 254
    1c34:	08 f0       	brcs	.+2      	; 0x1c38 <__addsf3x+0x96>
    1c36:	b3 cf       	rjmp	.-154    	; 0x1b9e <__addsf3+0x1e>
    1c38:	93 95       	inc	r25
    1c3a:	88 0f       	add	r24, r24
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <__addsf3x+0x9e>
    1c3e:	99 27       	eor	r25, r25
    1c40:	ee 0f       	add	r30, r30
    1c42:	97 95       	ror	r25
    1c44:	87 95       	ror	r24
    1c46:	08 95       	ret

00001c48 <__cmpsf2>:
    1c48:	97 d0       	rcall	.+302    	; 0x1d78 <__fp_cmp>
    1c4a:	08 f4       	brcc	.+2      	; 0x1c4e <__cmpsf2+0x6>
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	08 95       	ret

00001c50 <__divsf3>:
    1c50:	0c d0       	rcall	.+24     	; 0x1c6a <__divsf3x>
    1c52:	cd c0       	rjmp	.+410    	; 0x1dee <__fp_round>
    1c54:	c5 d0       	rcall	.+394    	; 0x1de0 <__fp_pscB>
    1c56:	40 f0       	brcs	.+16     	; 0x1c68 <__divsf3+0x18>
    1c58:	bc d0       	rcall	.+376    	; 0x1dd2 <__fp_pscA>
    1c5a:	30 f0       	brcs	.+12     	; 0x1c68 <__divsf3+0x18>
    1c5c:	21 f4       	brne	.+8      	; 0x1c66 <__divsf3+0x16>
    1c5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c60:	19 f0       	breq	.+6      	; 0x1c68 <__divsf3+0x18>
    1c62:	ae c0       	rjmp	.+348    	; 0x1dc0 <__fp_inf>
    1c64:	51 11       	cpse	r21, r1
    1c66:	f7 c0       	rjmp	.+494    	; 0x1e56 <__fp_szero>
    1c68:	b1 c0       	rjmp	.+354    	; 0x1dcc <__fp_nan>

00001c6a <__divsf3x>:
    1c6a:	d2 d0       	rcall	.+420    	; 0x1e10 <__fp_split3>
    1c6c:	98 f3       	brcs	.-26     	; 0x1c54 <__divsf3+0x4>

00001c6e <__divsf3_pse>:
    1c6e:	99 23       	and	r25, r25
    1c70:	c9 f3       	breq	.-14     	; 0x1c64 <__divsf3+0x14>
    1c72:	55 23       	and	r21, r21
    1c74:	b1 f3       	breq	.-20     	; 0x1c62 <__divsf3+0x12>
    1c76:	95 1b       	sub	r25, r21
    1c78:	55 0b       	sbc	r21, r21
    1c7a:	bb 27       	eor	r27, r27
    1c7c:	aa 27       	eor	r26, r26
    1c7e:	62 17       	cp	r22, r18
    1c80:	73 07       	cpc	r23, r19
    1c82:	84 07       	cpc	r24, r20
    1c84:	38 f0       	brcs	.+14     	; 0x1c94 <__divsf3_pse+0x26>
    1c86:	9f 5f       	subi	r25, 0xFF	; 255
    1c88:	5f 4f       	sbci	r21, 0xFF	; 255
    1c8a:	22 0f       	add	r18, r18
    1c8c:	33 1f       	adc	r19, r19
    1c8e:	44 1f       	adc	r20, r20
    1c90:	aa 1f       	adc	r26, r26
    1c92:	a9 f3       	breq	.-22     	; 0x1c7e <__divsf3_pse+0x10>
    1c94:	33 d0       	rcall	.+102    	; 0x1cfc <__divsf3_pse+0x8e>
    1c96:	0e 2e       	mov	r0, r30
    1c98:	3a f0       	brmi	.+14     	; 0x1ca8 <__divsf3_pse+0x3a>
    1c9a:	e0 e8       	ldi	r30, 0x80	; 128
    1c9c:	30 d0       	rcall	.+96     	; 0x1cfe <__divsf3_pse+0x90>
    1c9e:	91 50       	subi	r25, 0x01	; 1
    1ca0:	50 40       	sbci	r21, 0x00	; 0
    1ca2:	e6 95       	lsr	r30
    1ca4:	00 1c       	adc	r0, r0
    1ca6:	ca f7       	brpl	.-14     	; 0x1c9a <__divsf3_pse+0x2c>
    1ca8:	29 d0       	rcall	.+82     	; 0x1cfc <__divsf3_pse+0x8e>
    1caa:	fe 2f       	mov	r31, r30
    1cac:	27 d0       	rcall	.+78     	; 0x1cfc <__divsf3_pse+0x8e>
    1cae:	66 0f       	add	r22, r22
    1cb0:	77 1f       	adc	r23, r23
    1cb2:	88 1f       	adc	r24, r24
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	26 17       	cp	r18, r22
    1cb8:	37 07       	cpc	r19, r23
    1cba:	48 07       	cpc	r20, r24
    1cbc:	ab 07       	cpc	r26, r27
    1cbe:	b0 e8       	ldi	r27, 0x80	; 128
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <__divsf3_pse+0x56>
    1cc2:	bb 0b       	sbc	r27, r27
    1cc4:	80 2d       	mov	r24, r0
    1cc6:	bf 01       	movw	r22, r30
    1cc8:	ff 27       	eor	r31, r31
    1cca:	93 58       	subi	r25, 0x83	; 131
    1ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cce:	2a f0       	brmi	.+10     	; 0x1cda <__divsf3_pse+0x6c>
    1cd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd2:	51 05       	cpc	r21, r1
    1cd4:	68 f0       	brcs	.+26     	; 0x1cf0 <__divsf3_pse+0x82>
    1cd6:	74 c0       	rjmp	.+232    	; 0x1dc0 <__fp_inf>
    1cd8:	be c0       	rjmp	.+380    	; 0x1e56 <__fp_szero>
    1cda:	5f 3f       	cpi	r21, 0xFF	; 255
    1cdc:	ec f3       	brlt	.-6      	; 0x1cd8 <__divsf3_pse+0x6a>
    1cde:	98 3e       	cpi	r25, 0xE8	; 232
    1ce0:	dc f3       	brlt	.-10     	; 0x1cd8 <__divsf3_pse+0x6a>
    1ce2:	86 95       	lsr	r24
    1ce4:	77 95       	ror	r23
    1ce6:	67 95       	ror	r22
    1ce8:	b7 95       	ror	r27
    1cea:	f7 95       	ror	r31
    1cec:	9f 5f       	subi	r25, 0xFF	; 255
    1cee:	c9 f7       	brne	.-14     	; 0x1ce2 <__divsf3_pse+0x74>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	91 1d       	adc	r25, r1
    1cf4:	96 95       	lsr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	97 f9       	bld	r25, 7
    1cfa:	08 95       	ret
    1cfc:	e1 e0       	ldi	r30, 0x01	; 1
    1cfe:	66 0f       	add	r22, r22
    1d00:	77 1f       	adc	r23, r23
    1d02:	88 1f       	adc	r24, r24
    1d04:	bb 1f       	adc	r27, r27
    1d06:	62 17       	cp	r22, r18
    1d08:	73 07       	cpc	r23, r19
    1d0a:	84 07       	cpc	r24, r20
    1d0c:	ba 07       	cpc	r27, r26
    1d0e:	20 f0       	brcs	.+8      	; 0x1d18 <__divsf3_pse+0xaa>
    1d10:	62 1b       	sub	r22, r18
    1d12:	73 0b       	sbc	r23, r19
    1d14:	84 0b       	sbc	r24, r20
    1d16:	ba 0b       	sbc	r27, r26
    1d18:	ee 1f       	adc	r30, r30
    1d1a:	88 f7       	brcc	.-30     	; 0x1cfe <__divsf3_pse+0x90>
    1d1c:	e0 95       	com	r30
    1d1e:	08 95       	ret

00001d20 <__fixunssfsi>:
    1d20:	7f d0       	rcall	.+254    	; 0x1e20 <__fp_splitA>
    1d22:	88 f0       	brcs	.+34     	; 0x1d46 <__fixunssfsi+0x26>
    1d24:	9f 57       	subi	r25, 0x7F	; 127
    1d26:	90 f0       	brcs	.+36     	; 0x1d4c <__fixunssfsi+0x2c>
    1d28:	b9 2f       	mov	r27, r25
    1d2a:	99 27       	eor	r25, r25
    1d2c:	b7 51       	subi	r27, 0x17	; 23
    1d2e:	a0 f0       	brcs	.+40     	; 0x1d58 <__fixunssfsi+0x38>
    1d30:	d1 f0       	breq	.+52     	; 0x1d66 <__fixunssfsi+0x46>
    1d32:	66 0f       	add	r22, r22
    1d34:	77 1f       	adc	r23, r23
    1d36:	88 1f       	adc	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	1a f0       	brmi	.+6      	; 0x1d42 <__fixunssfsi+0x22>
    1d3c:	ba 95       	dec	r27
    1d3e:	c9 f7       	brne	.-14     	; 0x1d32 <__fixunssfsi+0x12>
    1d40:	12 c0       	rjmp	.+36     	; 0x1d66 <__fixunssfsi+0x46>
    1d42:	b1 30       	cpi	r27, 0x01	; 1
    1d44:	81 f0       	breq	.+32     	; 0x1d66 <__fixunssfsi+0x46>
    1d46:	86 d0       	rcall	.+268    	; 0x1e54 <__fp_zero>
    1d48:	b1 e0       	ldi	r27, 0x01	; 1
    1d4a:	08 95       	ret
    1d4c:	83 c0       	rjmp	.+262    	; 0x1e54 <__fp_zero>
    1d4e:	67 2f       	mov	r22, r23
    1d50:	78 2f       	mov	r23, r24
    1d52:	88 27       	eor	r24, r24
    1d54:	b8 5f       	subi	r27, 0xF8	; 248
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <__fixunssfsi+0x46>
    1d58:	b9 3f       	cpi	r27, 0xF9	; 249
    1d5a:	cc f3       	brlt	.-14     	; 0x1d4e <__fixunssfsi+0x2e>
    1d5c:	86 95       	lsr	r24
    1d5e:	77 95       	ror	r23
    1d60:	67 95       	ror	r22
    1d62:	b3 95       	inc	r27
    1d64:	d9 f7       	brne	.-10     	; 0x1d5c <__fixunssfsi+0x3c>
    1d66:	3e f4       	brtc	.+14     	; 0x1d76 <__fixunssfsi+0x56>
    1d68:	90 95       	com	r25
    1d6a:	80 95       	com	r24
    1d6c:	70 95       	com	r23
    1d6e:	61 95       	neg	r22
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255
    1d72:	8f 4f       	sbci	r24, 0xFF	; 255
    1d74:	9f 4f       	sbci	r25, 0xFF	; 255
    1d76:	08 95       	ret

00001d78 <__fp_cmp>:
    1d78:	99 0f       	add	r25, r25
    1d7a:	00 08       	sbc	r0, r0
    1d7c:	55 0f       	add	r21, r21
    1d7e:	aa 0b       	sbc	r26, r26
    1d80:	e0 e8       	ldi	r30, 0x80	; 128
    1d82:	fe ef       	ldi	r31, 0xFE	; 254
    1d84:	16 16       	cp	r1, r22
    1d86:	17 06       	cpc	r1, r23
    1d88:	e8 07       	cpc	r30, r24
    1d8a:	f9 07       	cpc	r31, r25
    1d8c:	c0 f0       	brcs	.+48     	; 0x1dbe <__fp_cmp+0x46>
    1d8e:	12 16       	cp	r1, r18
    1d90:	13 06       	cpc	r1, r19
    1d92:	e4 07       	cpc	r30, r20
    1d94:	f5 07       	cpc	r31, r21
    1d96:	98 f0       	brcs	.+38     	; 0x1dbe <__fp_cmp+0x46>
    1d98:	62 1b       	sub	r22, r18
    1d9a:	73 0b       	sbc	r23, r19
    1d9c:	84 0b       	sbc	r24, r20
    1d9e:	95 0b       	sbc	r25, r21
    1da0:	39 f4       	brne	.+14     	; 0x1db0 <__fp_cmp+0x38>
    1da2:	0a 26       	eor	r0, r26
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <__fp_cmp+0x46>
    1da6:	23 2b       	or	r18, r19
    1da8:	24 2b       	or	r18, r20
    1daa:	25 2b       	or	r18, r21
    1dac:	21 f4       	brne	.+8      	; 0x1db6 <__fp_cmp+0x3e>
    1dae:	08 95       	ret
    1db0:	0a 26       	eor	r0, r26
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <__fp_cmp+0x3e>
    1db4:	a1 40       	sbci	r26, 0x01	; 1
    1db6:	a6 95       	lsr	r26
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	81 1d       	adc	r24, r1
    1dbc:	81 1d       	adc	r24, r1
    1dbe:	08 95       	ret

00001dc0 <__fp_inf>:
    1dc0:	97 f9       	bld	r25, 7
    1dc2:	9f 67       	ori	r25, 0x7F	; 127
    1dc4:	80 e8       	ldi	r24, 0x80	; 128
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	08 95       	ret

00001dcc <__fp_nan>:
    1dcc:	9f ef       	ldi	r25, 0xFF	; 255
    1dce:	80 ec       	ldi	r24, 0xC0	; 192
    1dd0:	08 95       	ret

00001dd2 <__fp_pscA>:
    1dd2:	00 24       	eor	r0, r0
    1dd4:	0a 94       	dec	r0
    1dd6:	16 16       	cp	r1, r22
    1dd8:	17 06       	cpc	r1, r23
    1dda:	18 06       	cpc	r1, r24
    1ddc:	09 06       	cpc	r0, r25
    1dde:	08 95       	ret

00001de0 <__fp_pscB>:
    1de0:	00 24       	eor	r0, r0
    1de2:	0a 94       	dec	r0
    1de4:	12 16       	cp	r1, r18
    1de6:	13 06       	cpc	r1, r19
    1de8:	14 06       	cpc	r1, r20
    1dea:	05 06       	cpc	r0, r21
    1dec:	08 95       	ret

00001dee <__fp_round>:
    1dee:	09 2e       	mov	r0, r25
    1df0:	03 94       	inc	r0
    1df2:	00 0c       	add	r0, r0
    1df4:	11 f4       	brne	.+4      	; 0x1dfa <__fp_round+0xc>
    1df6:	88 23       	and	r24, r24
    1df8:	52 f0       	brmi	.+20     	; 0x1e0e <__fp_round+0x20>
    1dfa:	bb 0f       	add	r27, r27
    1dfc:	40 f4       	brcc	.+16     	; 0x1e0e <__fp_round+0x20>
    1dfe:	bf 2b       	or	r27, r31
    1e00:	11 f4       	brne	.+4      	; 0x1e06 <__fp_round+0x18>
    1e02:	60 ff       	sbrs	r22, 0
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <__fp_round+0x20>
    1e06:	6f 5f       	subi	r22, 0xFF	; 255
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	08 95       	ret

00001e10 <__fp_split3>:
    1e10:	57 fd       	sbrc	r21, 7
    1e12:	90 58       	subi	r25, 0x80	; 128
    1e14:	44 0f       	add	r20, r20
    1e16:	55 1f       	adc	r21, r21
    1e18:	59 f0       	breq	.+22     	; 0x1e30 <__fp_splitA+0x10>
    1e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1c:	71 f0       	breq	.+28     	; 0x1e3a <__fp_splitA+0x1a>
    1e1e:	47 95       	ror	r20

00001e20 <__fp_splitA>:
    1e20:	88 0f       	add	r24, r24
    1e22:	97 fb       	bst	r25, 7
    1e24:	99 1f       	adc	r25, r25
    1e26:	61 f0       	breq	.+24     	; 0x1e40 <__fp_splitA+0x20>
    1e28:	9f 3f       	cpi	r25, 0xFF	; 255
    1e2a:	79 f0       	breq	.+30     	; 0x1e4a <__fp_splitA+0x2a>
    1e2c:	87 95       	ror	r24
    1e2e:	08 95       	ret
    1e30:	12 16       	cp	r1, r18
    1e32:	13 06       	cpc	r1, r19
    1e34:	14 06       	cpc	r1, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	f2 cf       	rjmp	.-28     	; 0x1e1e <__fp_split3+0xe>
    1e3a:	46 95       	lsr	r20
    1e3c:	f1 df       	rcall	.-30     	; 0x1e20 <__fp_splitA>
    1e3e:	08 c0       	rjmp	.+16     	; 0x1e50 <__fp_splitA+0x30>
    1e40:	16 16       	cp	r1, r22
    1e42:	17 06       	cpc	r1, r23
    1e44:	18 06       	cpc	r1, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	f1 cf       	rjmp	.-30     	; 0x1e2c <__fp_splitA+0xc>
    1e4a:	86 95       	lsr	r24
    1e4c:	71 05       	cpc	r23, r1
    1e4e:	61 05       	cpc	r22, r1
    1e50:	08 94       	sec
    1e52:	08 95       	ret

00001e54 <__fp_zero>:
    1e54:	e8 94       	clt

00001e56 <__fp_szero>:
    1e56:	bb 27       	eor	r27, r27
    1e58:	66 27       	eor	r22, r22
    1e5a:	77 27       	eor	r23, r23
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	97 f9       	bld	r25, 7
    1e60:	08 95       	ret

00001e62 <__gesf2>:
    1e62:	8a df       	rcall	.-236    	; 0x1d78 <__fp_cmp>
    1e64:	08 f4       	brcc	.+2      	; 0x1e68 <__gesf2+0x6>
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	08 95       	ret

00001e6a <__mulsf3>:
    1e6a:	0b d0       	rcall	.+22     	; 0x1e82 <__mulsf3x>
    1e6c:	c0 cf       	rjmp	.-128    	; 0x1dee <__fp_round>
    1e6e:	b1 df       	rcall	.-158    	; 0x1dd2 <__fp_pscA>
    1e70:	28 f0       	brcs	.+10     	; 0x1e7c <__mulsf3+0x12>
    1e72:	b6 df       	rcall	.-148    	; 0x1de0 <__fp_pscB>
    1e74:	18 f0       	brcs	.+6      	; 0x1e7c <__mulsf3+0x12>
    1e76:	95 23       	and	r25, r21
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <__mulsf3+0x12>
    1e7a:	a2 cf       	rjmp	.-188    	; 0x1dc0 <__fp_inf>
    1e7c:	a7 cf       	rjmp	.-178    	; 0x1dcc <__fp_nan>
    1e7e:	11 24       	eor	r1, r1
    1e80:	ea cf       	rjmp	.-44     	; 0x1e56 <__fp_szero>

00001e82 <__mulsf3x>:
    1e82:	c6 df       	rcall	.-116    	; 0x1e10 <__fp_split3>
    1e84:	a0 f3       	brcs	.-24     	; 0x1e6e <__mulsf3+0x4>

00001e86 <__mulsf3_pse>:
    1e86:	95 9f       	mul	r25, r21
    1e88:	d1 f3       	breq	.-12     	; 0x1e7e <__mulsf3+0x14>
    1e8a:	95 0f       	add	r25, r21
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	55 1f       	adc	r21, r21
    1e90:	62 9f       	mul	r22, r18
    1e92:	f0 01       	movw	r30, r0
    1e94:	72 9f       	mul	r23, r18
    1e96:	bb 27       	eor	r27, r27
    1e98:	f0 0d       	add	r31, r0
    1e9a:	b1 1d       	adc	r27, r1
    1e9c:	63 9f       	mul	r22, r19
    1e9e:	aa 27       	eor	r26, r26
    1ea0:	f0 0d       	add	r31, r0
    1ea2:	b1 1d       	adc	r27, r1
    1ea4:	aa 1f       	adc	r26, r26
    1ea6:	64 9f       	mul	r22, r20
    1ea8:	66 27       	eor	r22, r22
    1eaa:	b0 0d       	add	r27, r0
    1eac:	a1 1d       	adc	r26, r1
    1eae:	66 1f       	adc	r22, r22
    1eb0:	82 9f       	mul	r24, r18
    1eb2:	22 27       	eor	r18, r18
    1eb4:	b0 0d       	add	r27, r0
    1eb6:	a1 1d       	adc	r26, r1
    1eb8:	62 1f       	adc	r22, r18
    1eba:	73 9f       	mul	r23, r19
    1ebc:	b0 0d       	add	r27, r0
    1ebe:	a1 1d       	adc	r26, r1
    1ec0:	62 1f       	adc	r22, r18
    1ec2:	83 9f       	mul	r24, r19
    1ec4:	a0 0d       	add	r26, r0
    1ec6:	61 1d       	adc	r22, r1
    1ec8:	22 1f       	adc	r18, r18
    1eca:	74 9f       	mul	r23, r20
    1ecc:	33 27       	eor	r19, r19
    1ece:	a0 0d       	add	r26, r0
    1ed0:	61 1d       	adc	r22, r1
    1ed2:	23 1f       	adc	r18, r19
    1ed4:	84 9f       	mul	r24, r20
    1ed6:	60 0d       	add	r22, r0
    1ed8:	21 1d       	adc	r18, r1
    1eda:	82 2f       	mov	r24, r18
    1edc:	76 2f       	mov	r23, r22
    1ede:	6a 2f       	mov	r22, r26
    1ee0:	11 24       	eor	r1, r1
    1ee2:	9f 57       	subi	r25, 0x7F	; 127
    1ee4:	50 40       	sbci	r21, 0x00	; 0
    1ee6:	8a f0       	brmi	.+34     	; 0x1f0a <__mulsf3_pse+0x84>
    1ee8:	e1 f0       	breq	.+56     	; 0x1f22 <__mulsf3_pse+0x9c>
    1eea:	88 23       	and	r24, r24
    1eec:	4a f0       	brmi	.+18     	; 0x1f00 <__mulsf3_pse+0x7a>
    1eee:	ee 0f       	add	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	bb 1f       	adc	r27, r27
    1ef4:	66 1f       	adc	r22, r22
    1ef6:	77 1f       	adc	r23, r23
    1ef8:	88 1f       	adc	r24, r24
    1efa:	91 50       	subi	r25, 0x01	; 1
    1efc:	50 40       	sbci	r21, 0x00	; 0
    1efe:	a9 f7       	brne	.-22     	; 0x1eea <__mulsf3_pse+0x64>
    1f00:	9e 3f       	cpi	r25, 0xFE	; 254
    1f02:	51 05       	cpc	r21, r1
    1f04:	70 f0       	brcs	.+28     	; 0x1f22 <__mulsf3_pse+0x9c>
    1f06:	5c cf       	rjmp	.-328    	; 0x1dc0 <__fp_inf>
    1f08:	a6 cf       	rjmp	.-180    	; 0x1e56 <__fp_szero>
    1f0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f0c:	ec f3       	brlt	.-6      	; 0x1f08 <__mulsf3_pse+0x82>
    1f0e:	98 3e       	cpi	r25, 0xE8	; 232
    1f10:	dc f3       	brlt	.-10     	; 0x1f08 <__mulsf3_pse+0x82>
    1f12:	86 95       	lsr	r24
    1f14:	77 95       	ror	r23
    1f16:	67 95       	ror	r22
    1f18:	b7 95       	ror	r27
    1f1a:	f7 95       	ror	r31
    1f1c:	e7 95       	ror	r30
    1f1e:	9f 5f       	subi	r25, 0xFF	; 255
    1f20:	c1 f7       	brne	.-16     	; 0x1f12 <__mulsf3_pse+0x8c>
    1f22:	fe 2b       	or	r31, r30
    1f24:	88 0f       	add	r24, r24
    1f26:	91 1d       	adc	r25, r1
    1f28:	96 95       	lsr	r25
    1f2a:	87 95       	ror	r24
    1f2c:	97 f9       	bld	r25, 7
    1f2e:	08 95       	ret

00001f30 <memcpy_P>:
    1f30:	fb 01       	movw	r30, r22
    1f32:	dc 01       	movw	r26, r24
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <memcpy_P+0xa>
    1f36:	05 90       	lpm	r0, Z+
    1f38:	0d 92       	st	X+, r0
    1f3a:	41 50       	subi	r20, 0x01	; 1
    1f3c:	50 40       	sbci	r21, 0x00	; 0
    1f3e:	d8 f7       	brcc	.-10     	; 0x1f36 <memcpy_P+0x6>
    1f40:	08 95       	ret

00001f42 <_exit>:
    1f42:	f8 94       	cli

00001f44 <__stop_program>:
    1f44:	ff cf       	rjmp	.-2      	; 0x1f44 <__stop_program>
